name: Create or Update Release with Tag

on:
  push:
    tags:
      - 'v*'

permissions: write-all

jobs:
  manage-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Verify asset file exists
        run: |
          if [ ! -f Strangevania.zip ]; then
            echo "Strangevania.zip not found!"
            exit 1
          fi

      - name: Get release by tag
        id: get_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ github.ref_name || github.ref.replace('refs/tags/', '') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create or update release
        id: create_or_update_release
        if: steps.get_release.outputs.data == ''  # If no release exists
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || github.ref.replace('refs/tags/', '') }}
          release_name: Release ${{ github.ref_name || github.ref.replace('refs/tags/', '') }}
          draft: false
          prerelease: false

      - name: Delete existing asset (if present)
        if: steps.get_release.outputs.data != ''  # If release exists
        run: |
          release_id=$(echo '${{ steps.get_release.outputs.data }}' | jq -r '.id')
          asset_id=$(echo '${{ steps.get_release.outputs.data }}' | jq -r '.assets[] | select(.name=="Strangevania.zip") | .id')
          if [ -n "$asset_id" ]; then
            echo "Deleting existing asset..."
            curl -X DELETE \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id
          fi

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.data != '' && steps.get_release.outputs.data | jq -r '.upload_url' || steps.create_or_update_release.outputs.upload_url }}
          asset_path: Strangevania.zip
          asset_name: Strangevania.zip
          asset_content_type: application/zip
