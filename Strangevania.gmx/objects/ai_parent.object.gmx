<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>entity_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = 1;
damage = 4;
flash = 0;
hurt = 0;
pointReward = 100;
playDeathSound = true;
disabled = false;
dropchance = 25;
canGetStaggered = true;
staggered = false;
hitSound = snd_hit;
disableDistance = 175;
deathEvent = "NONE";

hsp = 0;
vsp = 0;

moveOnPlatform = true;

killer = noone;
attacker = noone;

spawnerObject = noone; //If spawned with an ai_spawner

lastBottleHit = 0;

outsideRoomSteps = 0;
outsideRoomMax = 3*room_speed;

outsideViewSteps = 0;
outsideViewMax = 3*room_speed;
beenInsideView = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if spawnerObject != noone
{
    //print("SpawnerObject!");
    var _len = ds_list_size(spawnerObject.enemyList);
    for (var a = 0; a &lt; _len; a++)
    {
        if spawnerObject.enemyList[| a] == id
        {
            ds_list_delete(spawnerObject.enemyList, a);
            break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>staggered = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if disabled
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>disabled = (distance_to_point(obj_camera.x, y) &gt; disableDistance
            and disableDistance &gt; 0
            and !ObjectInsideView(id, 16))

//Disable if outside current camera view Y level   
if !disabled and (bbox_bottom &lt; obj_camera.y or bbox_top &gt; obj_camera.y+viewh)//!valWithin(y, obj_camera.y, obj_camera.y+viewh)
{disabled = true;}

//disabled = (distance_to_object(obj_camera) &gt; disableDistance and disableDistance &gt; 0);
if director.disableAI then disabled = director.disableAI;
if staggered then disabled = true;

//Pause alarms for disabled AI
if disabled
{
    for(i = 0; i &lt;= 10; i++) //Excluding alarm 11 for stagger
    {
        if alarm_get(i) &gt; 0 {alarm[i]++}
    }
}

if hp &lt;= 0
{
    killer = attacker;
    
    if object_get_parent(killer) == projectile_parent {event_fire("PlayerProjectileKilledAI", object_index, killer)};

    event_fire("PlayerKilledAI", id);
    if deathEvent != "NONE" {event_fire(deathEvent, id);}
    if (playDeathSound) audio_play_sound(snd_kill, 0, 0);
    instance_create(x, y, obj_sparkle);
    game_add_points(pointReward);
    
    with part_parent
    {
        if parent == other
        {
            instance_destroy();
        }
    }
    
    if irandom(100)&lt;dropchance
    {
        instance_create(x, y, obj_smallheart);
    }
    
    instance_destroy();
}

if hurt &gt; 0
{
    hurt--
}

if !InsideRoom(x, y, 16) {outsideRoomSteps++;}
else {outsideRoomSteps = 0;}
if outsideRoomMax != -1 and outsideRoomSteps &gt; outsideRoomMax {instance_destroy(); print(object_get_name(object_index), "("+string(id)+")", " removed outside room!");}

if InsideView(x, y) and !beenInsideView {beenInsideView = true;}

if !InsideView(x, y, 16) and beenInsideView {outsideViewSteps++;}
else {outsideViewSteps = 0;}
if outsideViewMax != -1 and outsideViewSteps &gt; outsideViewMax {instance_destroy(); print(object_get_name(object_index), "("+string(id)+")", " removed outside view!");}

if !disabled and moveOnPlatform
{
    //Moving platform logic
    var _movingPlatform = instance_place(x, y + max(1, vsp), obj_aisolid);
    if _movingPlatform
    {
        _movingPlatform = _movingPlatform.target;
        if _movingPlatform.object_index == obj_platform
        {
            /*if place_meeting(x, y + max(1, vsp), obj_platform)
            {
                _movingPlatform = instance_nearest(x, bbox_bottom, obj_platform);
            }*/
            
            if _movingPlatform and bbox_bottom &lt;= _movingPlatform.bbox_top
            {
                var _xadd = _movingPlatform.moveX;
                var _yadd = _movingPlatform.moveY;
                
                //if hsp == 0 then x += _xadd;
                x += _xadd;
                y += _yadd;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="projectile_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hurt == 0 and other.candamage and !gamemanager.paused
{
    if other.object_index == projectile_bottle
    {
        if other.id == lastBottleHit then exit;
        else lastBottleHit = other.id;
    }

    ColHitEffect(0, -3, 3);
    
    attacker = other.object_index;
    
    //audio_play_sound(hitSound, 0, 0);
    play_sound_pitched(hitSound, 0.9, 1.1);
    if other.destroyonhit {with other {instance_destroy();}}
    
    hp -= other.damage;
    flash = 3;
    hurt = 3;
    
    if canGetStaggered
    {
        alarm[11] = 10;
        staggered = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_whipbox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hurt == 0 and !gamemanager.paused
{
    ColHitEffect(0, -3, 3);
    audio_play_sound(hitSound, 0, 0);
    
    hp -= obj_player.whip;
    flash = 3;
    hurt = 3;
    attacker = player;
    
    if canGetStaggered
    {
        alarm[11] = 10;
        staggered = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if settings.spriteflicker {draw_object_sprite_flicker();}
else {draw_self();}

//Draw hitbox if enabled
if global.showhitbox
{
    draw_set_colour(c_red);
    draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1)
    draw_rectangle(bbox_left-1,bbox_top-1,bbox_right+1,bbox_bottom+1,1)
    draw_set_colour(c_white);
    
    draw_text(x-5, bbox_top-15, hp)
}

if flash &gt; 0
{
    shader_set(sh_white)
    image_alpha = random_range(0.50, 0.75);
    draw_self();
    shader_reset();
    flash--;
}
else {image_alpha = 1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
