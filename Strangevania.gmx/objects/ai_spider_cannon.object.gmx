<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spider_cannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ai_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

sprite_index = spr_cannon;

pointReward = 400;
hp = 9;//15
damage = 4;
facing = 1;
turning = true;
canGetStaggered = false;
moveOnPlatform = false;
hitSound = snd_hit2;

outsideViewMax  = -1; //Disable parent functionality, doesn't despawn out of view

gravityEnabled = false;
spiderMode = false;
movespeed = 2;
movespeedDefault = movespeed;
canMove = false;
chargePlayer = false;
chargeDelay = 0.6*room_speed;
chargeChance = 0.3; //Percent chance of charging (0.3 = 30%)
chargeSound = -1; //ID of sound not snd file

head_image_speed = 0;
head_image_index = 0;

shotdamage = 4;
shotspeed = 4;
delaymin = 2.5;
delaymax = 5.5;
shotdelay = 2*room_speed//3*room_speed;

pdir = -1;

initstep = true;

var rand = random_range(1,3);
alarm[0] = rand*room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if audio_exists(chargeSound)
{
    audio_stop_sound(chargeSound);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[2] = chargeDelay;

chargePlayer = chance(chargeChance);
if chargePlayer
{
    if !audio_is_playing(snd_spider_charge)
    {
        chargeSound = audio_play_sound(snd_spider_charge, 0, 1);
        var _len = audio_sound_length(snd_spider_charge);
        audio_sound_set_track_position(chargeSound, random_range(0, _len) );
    }
}
else
{
    audio_stop_sound(snd_spider_charge);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var yoff = (6*pdir)*facing;
if spiderMode then yoff = -6;
with instance_create(x, y+yoff, part_cannon_shot)
{
    parent = other;
    dir    = other.pdir;
    hsp    = other.shotspeed*dir;
    damage = other.shotdamage;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shotdelay = random_range(delaymin, delaymax)*room_speed;
alarm[0] = shotdelay;
var yoff = (6*pdir)*facing;
if spiderMode then yoff = -6;
with instance_create(x, y+yoff, part_cannon_shot)
{
    parent = other;
    dir    = other.pdir;
    hsp    = other.shotspeed*dir;
    damage = other.shotdamage;
}
alarm[1] = 0.75*room_speed; //Fire second shot after short delay
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if disabled then exit;

if hurt
{
    if chargePlayer
    {
        chargePlayer = false;
        alarm[2] = chargeDelay;
    }
    
    if spiderMode == false
    {
        var rep = round(random_range(2,4));
        var rx = random_range(6, 10);
        var ry = random_range(6, 10);
        repeat(rep) {instance_create(x+rx, (y-6)+ry, obj_debris)}
        audio_play_sound(snd_break, 0, 0);
        audio_play_sound(snd_spider_scream, 0, 0);
        
        gravityEnabled = true;
        vsp = -4;
        y+=vsp;
    
        spiderMode = true;
        image_speed = 1;
        image_index = 0;
        sprite_index = spr_spider_cannon_stand;
    }
}

if initstep
{
    facingDefault = facing;
    initstep = false;
}

image_xscale = facing;

if obj_player.x &lt; x { pdir = -1; }
else { pdir = 1; }

if turning
{
    facing = pdir*facingDefault;
}

if !spiderMode
{
    if alarm[0] &lt;= 0.8*room_speed
    {
        image_speed = 1;
    }
    else
    {
        image_speed = 0;
        image_index = 0;
    }
}
else //IF SPIDER MODE
{
    image_speed = 1;
    
    facing = pdir;
    
    if canMove
    {
        var pdistance = 130;
        var distBuffer = irandom_range(8,16)//8;
        
        if distance_to_point(obj_player.x, y) &gt;= pdistance+distBuffer
        {
            movedir = pdir;
        }
        else if distance_to_point(obj_player.x, y) &lt;= pdistance-distBuffer
        {
            movedir = pdir*-1;
        }
        
        if chargePlayer
        {
            movedir = pdir;
            movespeed = 3;
            sprite_index = spr_spider_cannon_charge;
            image_speed = 2;
            
            alarm[0] += 1;
        }
        else
        {
            movespeed = movespeedDefault;
            sprite_index = spr_spider_cannon;
            image_speed = 1;
            
            //if alarm[0] == -1 then alarm[0] = shotdelay;
        }
        
        hsp = movespeed*movedir;
    }
}

if gravityEnabled
{
    var grv = 1;
    vsp = vsp + grv;
    if vsp &gt;= 12 vsp = 12;

    //Vertical Collision
    if place_meeting( x, y+vsp, obj_aiblock)
    {
        while !place_meeting(x, y+sign(vsp), obj_aiblock)
        {
            y = y + sign(vsp)
        }
        vsp = 0;
    }
    y = y + vsp;
}

if canMove
{
    //Horizontal Collision
    if place_meeting( x+hsp, y, obj_aiblock)
    {
        while !place_meeting(x+sign(hsp), y, obj_aiblock)
        {
            x = x + sign(hsp)
        }
        hsp = 0;
    }
    x = x + hsp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chargePlayer = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index != spr_spider_cannon_stand then exit;

facingDefault = 1;
canMove = true;
gravityEnabled = true;
sprite_index = spr_spider_cannon;
alarm[2] = chargeDelay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if audio_exists(chargeSound)
{
    audio_stop_sound(chargeSound);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited() //Draw_self included in ai_parent draw event

if spiderMode and !chargePlayer and sprite_index != spr_spider_cannon_stand
{
    if alarm[0] &lt;= 0.8*room_speed
    {
        head_image_speed = 1;
    }
    else
    {
        head_image_speed = 0;
        head_image_index = 0;
    }
    
    draw_sprite_ext(spr_cannon_half, head_image_index, x, y-16, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    var _frames = sprite_get_number(spr_cannon_half)-1;
    head_image_index = wrap(head_image_index+head_image_speed, 0, _frames);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
