<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menumanager.menuEnabled = false;

// Load changelog text using the new script
var changelog_text = string_from_file("game/CHANGELOG.md");

// Split the changelog text into lines for easier drawing &amp; scrolling
//text_lines = string_split(changelog_text, "U+2028");
text_lines = string_split_unicode(changelog_text);

// Scrolling parameters
scroll_y = 0;
line_height = 44; // Adjust based on your font size

// Scroll box position and size
box_x = 8;
box_y = 8;
box_width = 320;
box_height = 180;

// Calculate max scroll offset
total_line_height = array_length_1d(text_lines) * line_height;
max_scroll = max(0, total_line_height - 22*line_height);// - box_height);

scr_surface = -1;
/*if (!surface_exists(scr_surface)) {
    scr_surface = -1;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(scr_surface)) {
    surface_free(scr_surface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_wheel_up() or inputmanager.up_held) {
    scroll_y = max(0, scroll_y - line_height);
}

if (mouse_wheel_down() or inputmanager.down_held) {
    scroll_y = min(max_scroll, scroll_y + line_height);
}

if inputmanager.menu.back_press or inputmanager.menu.escape_press
{
    audio_play_sound(snd_select, 0, 0);
    menumanager.menu_level = menulevel.main;
    menumanager.pos = 0;
    menumanager.menuEnabled = true;
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw event
var _surfScale = 1.5;
var _padding = 44*_surfScale;

draw_set_valign(fa_top);
draw_set_halign(fa_left);

// Create or resize surface if needed
if (!surface_exists(scr_surface) || surface_get_width(scr_surface) != box_width || surface_get_height(scr_surface) != box_height) {
    if (surface_exists(scr_surface)) surface_free(scr_surface);
    scr_surface = surface_create(window_get_width(), window_get_height()-(box_y*_padding)-_padding*2);
}

// Draw onto surface
surface_set_target(scr_surface);
draw_clear_alpha(c_black, 0); // transparent background


draw_set_color(c_white);
draw_set_font(font_changelog); // your font here

// Calculate first line and lines visible
var first_line = floor(scroll_y / line_height);
var lines_visible = ceil(window_get_height()-64 / line_height);

for (var i = first_line; i &lt; min(array_length_1d(text_lines), first_line + lines_visible + 1); i++) {
    var y_pos = 5 + (i - first_line) * line_height - (scroll_y mod line_height);
    var _str = text_lines[i];
    var _col = c_white;
    var _col2 = c_white;
    var _alpha = 1;
    var _textScale = 1;
    draw_set_font(font_changelog);
    
    if (string_contains("## ", _str) or string_contains("### ", _str))
    {
        _col = c_orange;
        _col2 = c_maroon;
        if string_contains("### ", _str) {_col = c_orange; _col2 = c_orange;}
    
        _str = string_replace(_str, "### ", "");
        _str = string_replace(_str, "## ", "");
        draw_set_font(font_changelog_italic);
    }
    
    draw_text_transformed_colour(5, y_pos, _str, _textScale, _textScale, 0, _col, _col, _col2, _col2, _alpha);
    //draw_text(5, y_pos, _str);
    //draw_text_ext_transformed(5, y_pos, text_lines[i], 8, ((500-10)/_textScale),_textScale, _textScale, 0);
}

surface_reset_target();

// Draw surface on screen

draw_set_color(c_white);

draw_surface_ext(scr_surface, box_x+_padding, box_y+_padding, _surfScale, _surfScale, 0, c_white, 1);
//draw_surface_stretched(scr_surface, box_x, box_y, box_width*4, box_height*4);
//draw_surface(scr_surface, box_x, box_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*// Draw event

// Create or resize surface if needed
if (!surface_exists(scr_surface) || surface_get_width(scr_surface) != box_width || surface_get_height(scr_surface) != box_height) {
    if (surface_exists(scr_surface)) surface_free(scr_surface);
    scr_surface = surface_create(box_width, box_height);
}

// Draw onto surface
surface_set_target(scr_surface);
draw_clear_alpha(c_black, 0); // transparent background

draw_set_color(c_white);
draw_set_font(font_changelog); // your font here

// Calculate first line and lines visible
var first_line = floor(scroll_y / line_height);
var lines_visible = ceil(box_height / line_height);

for (var i = first_line; i &lt; min(array_length_1d(text_lines), first_line + lines_visible + 1); i++) {
    var y_pos = 5 + (i - first_line) * line_height - (scroll_y mod line_height);
    var _str = text_lines[i];
    var _col = c_white;
    var _alpha = 1;
    var _textScale = 1;
    draw_set_font(font_changelog);
    
    if (string_contains("## ", _str) or string_contains("### ", _str))
    {
        print("BEFORE: ", _str)
        _str = string_replace(_str, "### ", "");
        _str = string_replace(_str, "## ", "");
        print("AFTER: ", _str)
        draw_set_font(font_changelog_italic);
        _col = c_orange;
    }
    
    draw_text_transformed_colour(5, y_pos, _str, _textScale, _textScale, 0, _col, _col, _col, _col, _alpha);
    //draw_text(5, y_pos, _str);
    //draw_text_ext_transformed(5, y_pos, text_lines[i], 8, ((500-10)/_textScale),_textScale, _textScale, 0);
}

surface_reset_target();

// Draw surface on screen with border
draw_set_color(c_black);
draw_rectangle(box_x - 2, box_y +- 2, box_x + box_width + 2, box_y + box_height + 2, false);

draw_set_color(c_white);
draw_surface_ext(scr_surface, box_x, box_y, 1, 1, 0, c_white, 1);
//draw_surface_stretched(scr_surface, box_x, box_y, box_width*4, box_height*4);
//draw_surface(scr_surface, box_x, box_y);*/

draw_set_color(c_black);
draw_rectangle(8, 8, vieww-8, viewh-8, false);
draw_set_color(c_white);

draw_set_valign(fa_middle);
draw_set_halign(fa_right);
draw_set_font(font_menu);

//Draw back button prompt
var bp_scale = (1/16)*3;
draw_text_transformed_colour(viewx+vieww-22, viewy+viewh-12, "Back", 0.75, 0.75, 0,
    c_white, c_white, c_ltgray, c_ltgray, 1);
draw_sprite_ext(bp_back_lt, inputmanager.control_type, viewx+vieww-12, viewy+viewh-12,
    bp_scale, bp_scale, 0, c_white, 1);
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
