<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_director</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>manager_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_version = "0.4.9";
game_subversion = "";
game_calculate_subversion();

holiday = "NONE";
CalculateHolidays();

savemap  = undefined; //Leave this as undefined
savename = "save0.dat"

loadbarx = 4;
loadbary = 180-8;
loadbarw = vieww-loadbarx-64;
loadbarh = 2;
loadbarval = 0;
loadbarlerp = 0;
loadbarmax = 4;

loadbardelay = 1*room_speed;
game_logo_scale = 1;
game_logo_anim = false;
game_logo_inc = -0.025;

skin_index = 0;
skin_index_max = sprite_get_width(pal_player);
whipskin_index = 0;
whipskin_index_max = 0;//3;

newskin_list = ds_list_create();
newwhip_list = ds_list_create();

showHiddenStats = false;

mastervolume = 1.00;
musicvolume = 1.00;//0.40;
musicmult = 1;
sfxvolume = 1.00;//0.50;

catch_error_init();
catch_error_set_normal(catch_error_normal_queue);
catch_error_set_fatal(catch_error_fatal_queue);

console_init(); //MAKE SURE NO PROBLEMS WITH THIS BEING AT TOP
instance_create(0, 0, errorhandler);
event_handler_init();
music_manager_init()
scr_init_styles();
scr_init_whipskins();
inputmanager_init();
ach_manager_init();
stat_tracker_init();
//console_init();
settings_manager_init()
level_manager_init();
discord_manager_init();

whipskin_name = whipskin_info[whipskin_index, style.name];

DeathMessage_List = ds_list_create();
DeathMessage_Count = 0;
deathmessage_init_list();

particles_init();

global.debugoverlay = false;

fullscreen = false;
prev_fullscreen = fullscreen;

hideMouse = true;

//list of resolution options
res_array[0, 0] = 960;
res_array[0, 1] = 540;

res_array[1, 0] = 1280;
res_array[1, 1] = 720;

res_array[2, 0] = 1600;
res_array[2, 1] = 900;

res_array[3, 0] = 1920;
res_array[3, 1] = 1080;

res_array[4, 0] = 2240;
res_array[4, 1] = 1260;

res_array[5, 0] = 2560;
res_array[5, 1] = 1440;

res_array[6, 0] = 2880;
res_array[6, 1] = 1620;

res_array[7, 0] = 3200;
res_array[7, 1] = 1800;

res_array[8, 0] = 3520;
res_array[8, 1] = 1980;

res_array[9, 0] = 3840;
res_array[9, 1] = 2160;

res_array[10, 0] = 4160;
res_array[10, 1] = 2340;

res_array[11, 0] = 4480;
res_array[11, 1] = 2520;

res_array[12, 0] = 4800;
res_array[12, 1] = 2700;

res_id = 1;
res_max = (array_height_2d(res_array)-1);
res_monitor_max = res_max;

var _dw = display_get_width();
for(r=0; r&lt;=res_max; r++)
{
    if res_array[r, 0] == _dw
    {
        res_monitor_max = r;
        break;
    }
    if res_array[r, 0] &gt; _dw
    {
        res_monitor_max = r-1;
        break;
    }
}

global.money = 0;

config_loaded = false;
screen_loaded = false;
music_loaded = false;
sfx_loaded = false;

global.skipIntroOnce = false;

save_migrate("save0.sav");
scr_loadconfig();
scr_loadgame();
if res_id == -1 {res_id = res_monitor_max-2;}

showHiddenStats = stat_get("CHEATS_ENABLED");

res_text = (string(res_array[res_id,0]) + "x" + string(res_array[res_id,1]))
game_width = res_array[res_id, 0];
game_height = res_array[res_id, 1];

audio_group_load(ag_music);
audio_group_load(ag_sfx);
audio_group_load(ag_voices);

window_set_size(game_width, game_height);
surface_resize(application_surface, game_width, game_height);
room_goto_next();
loadImageIndex = 0;
alarm[0] = 15;

pal_swap_init_system(shd_pal_swapper);
randomize();

disableAI = false;
disablePlayer = false;
disableItems = false;

global.cutscene_paused = false;
global.menu_paused = false;
global.whipflash_paused = false;
global.stopwatch_paused = false;
global.cur_level = -1;

//Move borderless window vars
bw_mx = 0;
bw_my = 0;
bw_posx = 0;
bw_posy = 0;
bw_canmove = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//window_set_fullscreen(fullscreen);
if fullscreen
{
    var dw = display_get_width();
    var dh = display_get_height();
    window_set_size(dw, dh);
    surface_resize(application_surface, dw, dh);
    //alarm[0] = 15;
}
///////////////WINDOW IS CENTERED IN STEP EVENT WHEN ALARM = 14
prev_fullscreen = fullscreen;
screen_loaded = true;
//roomFadeTo(intro);

if !instance_exists(obj_OLDTVFilter_Strange)
{instance_create(0,0,obj_OLDTVFilter_Strange);}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>res_text = (string(res_array[res_id,0]) + "x" + string(res_array[res_id,1]));
game_width = res_array[res_id, 0];
game_height = res_array[res_id, 1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//randomize();

key_screenshot = keyboard_check_released(vk_f12);

if hideMouse
{
    window_set_cursor(cr_none);
}
else
{
    window_set_cursor(cr_default);
}

//show_debug_message(fps);
//show_debug_message(fps_real);


if screen_loaded and music_loaded and sfx_loaded and config_loaded
{
    if prev_fullscreen != fullscreen
    {
        //window_set_fullscreen(fullscreen);
        if fullscreen
        {
            var dw = display_get_width();
            var dh = display_get_height();
            window_set_size(dw, dh);
            surface_resize(application_surface, dw, dh);
            alarm[0] = 15;
        }
        else
        {
            window_set_size(game_width, game_height);
            surface_resize(application_surface, game_width, game_height);
            alarm[0] = 15;
        }
        prev_fullscreen = fullscreen;
    }

    /*audio_master_gain(mastervolume);
    audio_group_set_gain(ag_music, (musicvolume*musicmult), 0);
    audio_group_set_gain(ag_sfx, sfxvolume, 0);*/

    if room == init and loadbardelay &lt;= 0
    {
        UpdateAudioVolume();
        
        /*room_set_background(intro, 0, true, 0, bgr_intro, 0, 0, 0, 0, 0, 0, 1);
        if stat_get("FINISHED_GAME")
        {
            room_set_background(intro, 0, true, 0, bgr_finale, 0, 0, 0, 0, 0, 0, 1);
        }*/
    
        if !instance_exists(obj_fadeto)
        {
            var _nextRoom = room_next(room);
            roomFadeTo(_nextRoom, 0.05);
            if string_count("level", room_get_name(_nextRoom)) &gt;= 1 //If room is a level
            {
                if instance_exists(gamemanager) {instance_destroy(gamemanager);}
                lives = 3;
                level_current = level_get_from_room(_nextRoom);
            }
            //roomFadeTo(intro, 0.05);
        }
    }
    else
    {
        loadbardelay--;
    }
    
    if room != init
    {
        game_logo_anim = false;
    }
}

if alarm[0] == 14
{
    window_center();
}

whipskin_name = whipskin_info[whipskin_index, style.name];

//Move Borderless window
if !fullscreen
{
    if mouse_check_button_pressed(mb_left)
    {
        bw_mx = window_mouse_get_x();
        bw_my = window_mouse_get_y();
        
        var bw_buffer = 48;
        if (bw_mx &lt; bw_buffer or bw_mx &gt; window_get_width()-bw_buffer)
         or (bw_my &lt; bw_buffer or bw_my &gt; window_get_height()-bw_buffer)
        {bw_canmove = true;}
    }
    
    if mouse_check_button(mb_left) and bw_canmove
    {
        bw_posx -= bw_mx - window_mouse_get_x();
        bw_posy -= bw_my - window_mouse_get_y();
        window_set_position(window_get_x()+bw_posx, window_get_y()+bw_posy);
        bw_mx = window_mouse_get_x();
        bw_my = window_mouse_get_y();
    }
    
    if mouse_check_button_released(mb_left) {bw_canmove = false;}
}

disableAI = false;
disablePlayer = false;
disableItems = false;
if !instance_exists(gamemanager) then global.menu_paused = false;
if !instance_exists(menumanager) then global.menu_paused = false;
if !instance_exists(obj_cutscene) then global.cutscene_paused = false;

if instance_exists(player)
{
    if !player.upgradeflash then global.whipflash_paused = false;
}

if instance_exists(weapon_parent)
{
    if weapon_parent.canUse then global.stopwatch_paused = false;
}

if global.menu_paused
{
    disableAI = true;
    disablePlayer = true;
    disableItems = true;
}

if global.cutscene_paused
{
    disableAI = true;
    disablePlayer = true;
    disableItems = true;
    //gamemanager.stageTimePaused = true;
}

if global.whipflash_paused
{
    disableAI = true;
    disablePlayer = true;
    disableItems = true;
}

if global.stopwatch_paused
{
    disableAI = true;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if audio_group_is_loaded(ag_music)
{
    music_loaded = true;
}

if audio_group_is_loaded(ag_sfx) and audio_group_is_loaded(ag_voices)
{
    sfx_loaded = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (surface_exists(view_surf)) {
    surface_free(view_surf);
    view_surf = -1;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*view_visible[0] = true;
view_enabled = true;
//view_wview[0] = game_width/4;
//view_hview[0] = game_height/4;*/

director.disableAI = false;
director.disablePlayer = false;
director.disableItems = false;

view_enabled = true;
view_visible[0] = true;
view_wview[0] = 320;
view_hview[0] = 180-4; //Minus 4 to make height line up with 16x16 grid tiles
                       //Not sure if this will cause any issues with levels or resolution. Keep an eye on it DEBUG


/*if instance_exists(gamemanager)
{
    application_surface_draw_enable(false)
    var vx = 352;
    var vy = 198;
    viewxoff = (game_width-vx)/2;
    viewyoff = (game_width-vy)/2;
    view_wview[0] = vx//320;
    view_hview[0] = vy//180;
    
    surface_resize(application_surface, vx*3, vy*3)
    viewxoff = (game_width-(vx*2))/2;
    viewyoff = (game_width-(vy*2))/2;
}
else
{
    application_surface_draw_enable(true)
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>discord_presence_shutdown();
scr_saveconfig();
scr_savegame();
save_backup();

if variable_instance_exists(id, "fatalcrash") then exit;

if !stat_get("FINISHED_GAME")
{
    if instance_exists(obj_fadeto)
    {
        if obj_fadeto.newroom == closegame then exit;
    }
    audio_play_sound(snd_laugh, 1, 0);
    while audio_is_playing(snd_laugh)
    {
        //WAIT
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//key_screenshot = keyboard_check_released(vk_f12);

if key_screenshot
{
    date_set_timezone(timezone_local);
    var date = date_current_datetime()
    var time = date_datetime_string(date);
    
    time = string_replace_all(time, "/", "_");
    time = string_replace_all(time, ":", ".");
    time = string_replace_all(time, " ", "_");
    
    audio_play_sound(snd_screenshot, 0, 0);
    screen_save(working_directory + "screenshots\strangevania_" + time + ".png");
    print("Screenshot taken: " + time);
    //date_set_timezone(timezone_utc)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == init
{
    var str = "Loading"
    var len = string_width(str);
    var height = string_height(str);
    var buffer = 8;
    draw_set_font(font_hud);
    draw_text_transformed(viewx+vieww-(len/2+buffer), viewy+viewh-(height/2+(buffer/2)), str,
    0.5, 0.5, 0);
    
    var spr = spr_player_run;
    var sprx = (viewx+vieww) - (len/2) - 18;
    var spry = (viewy+viewh) - 12;
    
    draw_sprite_ext(spr, loadImageIndex, sprx, spry, -0.5, 0.5, 0, c_white, 1);
    if (loadImageIndex &lt; sprite_get_number(spr)) {loadImageIndex++;}
    else {loadImageIndex = 0;}
    
    var loadstate = "ERROR";
    var progress = "";
    
    if !config_loaded {loadstate = "Loading Config";}
    else if !screen_loaded {loadstate = "Setting up display";}
    else if !music_loaded {loadstate = "Unpacking Music"; progress = string(audio_group_load_progress(ag_music))}
    else if !sfx_loaded 
        {
            loadstate = "Unpacking SFX";
            
            var tempProgress = audio_group_load_progress(ag_sfx) + audio_group_load_progress(ag_voices)
            tempProgress = 100 * (tempProgress / 200);
            progress = string(tempProgress);
        }
    else loadstate = "Done";
    
    if progress != "" then progress = (progress + "%");
    
    var str = loadstate + " " + progress
    var bufferx = 4;
    var buffery = 16;
    draw_set_font(font_menu);
    draw_text_transformed(bufferx, viewy+180-buffery, str,
    0.5, 0.5, 0);
    
    var loads = screen_loaded + music_loaded + sfx_loaded + config_loaded;
    loadbarval = (loads / loadbarmax) * 100;
    loadbarlerp = lerp(loadbarlerp, loadbarval, 0.2)
    draw_healthbar(loadbarx, loadbary, loadbarx+loadbarw, loadbary+loadbarh, loadbarlerp,
    c_dkgray, c_white, c_white, 0, true, false);
    //show_debug_message(loadstate)
    
    draw_sprite_ext(logo_game, 0, viewx+vieww/2,viewy+viewh/2, game_logo_scale, game_logo_scale,
    0, c_white, loadbarlerp/100);
    
    if loadbarval == 100 and !game_logo_anim
    {
        audio_play_sound(snd_loaded, 1, 0);
        game_logo_anim = true;
    }
    
    //Game Logo Animation
    if game_logo_anim
    { 
        game_logo_scale += game_logo_inc
        if (game_logo_scale &lt; 0.8) and sign(game_logo_inc) == -1 {game_logo_inc *= -1;}
        else if (game_logo_scale &gt; 1.2) and sign(game_logo_inc) == 1 {game_logo_inc *= -1}
    }
    else
    {
        game_logo_scale = loadbarlerp/100;
    }
    
    draw_set_font(font_hud);
}

if global.debugoverlay
{
    draw_sprite_stretched_ext(spr_black_pixel, 0, viewx, viewy, vieww, 7, c_white, 0.75);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="121">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// toggle debug overlay
global.debugoverlay = !global.debugoverlay;
show_debug_overlay(global.debugoverlay)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _toggle = iif(settings.oldtvfilter_enabled, 0, 1)
setting_set_value("oldtvfilter_enabled", _toggle);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_group_stop_all(ag_music);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="109">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.money -= 25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="107">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.money += 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
