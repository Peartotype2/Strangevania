<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gamemanager</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>manager_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gmInit = false;
if instance_number(gamemanager) &gt; 1
{
    with gamemanager
    {
        if gmInit != true
        {
            instance_destroy();
            print("DUPLICATE GAMEMANAGERS. DESTROYING.");
            exit;
        }
    }
}
gmInit = true;
print("gmInit TRUE!");

firststep = true;

playerDied = false;
//levelContinue = false;
oldPlayerWhip = -1;

global.showhitbox = false;
global.debugshowcamera = false;

PartSystem = part_system_create();
part_system_automatic_update(PartSystem, false);
//part_system_automatic_draw(PartSystem, false);
PartTicks = 0;
PartIncrement = 2;

//music_fade_to(snd_music4, 1000);

if instance_exists(obj_camera) then instance_destroy(obj_camera);
instance_create(x, y, obj_camera)
instance_create(x, y, obj_debugbox)

//view_wview[0] = 320;
//view_hview[0] = 180;
view_hborder[0] = 160;
view_vborder[0] = 31;
//view_object[0] = obj_camera;

ticks = 0;
seconds = 0;
lastsecond = 0;

points = 0;
heartsDefault = 5;
hearts = heartsDefault;
//lives = 3;
stageNumber = 1;
stageTimeDefault = 400;
stageTime = stageTimeDefault//3.5*60;//210;
stageTimePaused = false;
stageAlarm = false;

if lives &lt; 0 then lives = 3;

paused = false;

weapon = WEP_NONE;
UpdateWeapon();

checkpoint = -1;

shotupgradeSpr = spr_nothing;

flash_disablePlayer = false
flash_disableAI = false
flash_disableItems = false

//Drop Tables
candleDropTable = ds_list_create();
drop_table_add(candleDropTable, item_up_whip, 8);
drop_table_add(candleDropTable, obj_smallheart, 45);
drop_table_add(candleDropTable, obj_bigheart, 8);
//drop_table_add(candleDropTable, item_up_chicken, 1);

///////////////////
//DEBUG OR CHEATS//
gamemanager.budha = false; //Players health never falls below 1

///////////////////
///////////////////

//HUD VARS
draw_hud = true;
hud_height = 32;

hpbar_x = 71;
hpbar_y = 11;
hud_hp = 16;
hpbar_wait = 0;
hpbar_delay = 6;

hud_playertext = "PLAYER";
hud_playertext_x = 2
hud_playertext_y = 6

hud_scoretext = "SCORE ";
hud_scoretext_x = 2
hud_scoretext_y = -3
hud_scoretext_num = points;
hud_scoretext_numstring = string(points);
hud_scoretext_length = 6;
hud_scoretext_zeros = 0;
hud_scoretext_sep = 60;

hud_timetext = "TIME ";
hud_timetext_x = 132
hud_timetext_y = -3
hud_timetext_sep = 50;
hud_timetext_num = stageTime;
hud_timetext_numstring = string(hud_timetext_num);
hud_timetext_length = 4;
hud_timetext_zeros = 0;

hud_stagetext = "STAGE ";
hud_stagetext_num = stageNumber;
hud_stagetext_sep = 60;
hud_stagetext_x = 232;
hud_stagetext_y = -3;

hud_enemytext = "ENEMY";
hud_enemytext_x = 2
hud_enemytext_y = 15

hud_hearttext = "0";
hud_hearttext_num = hearts;
hud_hearttext_x = 232;
hud_hearttext_y = 6;

hud_livestext = "0";
hud_livestext_num = lives;
hud_livestext_x = 232;
hud_livestext_y = 15;

hud_shotupgrade_x = 286;
hud_shotupgrade_y = 12;

hud_itembox_x = 162;
hud_itembox_y = 11;

realhud = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if gmInit
{
    ds_list_destroy(candleDropTable); 
    part_system_destroy(PartSystem);
    print("GAMEMANAGER MEMORY DESTROYED");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player.upgradeflash = false;

/*director.disablePlayer = gamemanager.flash_disablePlayer
director.disableAI = gamemanager.flash_disableAI
director.disableItems = gamemanager.flash_disableItems;*/

global.whipflash_paused = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !gmInit then exit;

if string_count("level", room_get_name(room)) &lt; 1 {instance_destroy();}

if instance_exists(menumanager) then paused = true;
else paused = false;

if (room == level_rewardroom or room == level_gameover)
{exit;}

if firststep
{
    game_play_room_music();
    firststep = false;
}

if settings.permadeath and lives &gt; 0
{
    lives = 0;
}

if !paused
{
    ticks++;
    PartTicks++;
    if ticks == room_speed
    {
        seconds++;
        ticks = 0;
    }
    if PartTicks &gt;= PartIncrement
    {
        PartTicks = 0;
        part_system_update(PartSystem);
    }
}
else
{
    if alarm_get(0) &gt; 0 {alarm[0]++}
}

stageTimePaused = global.cutscene_paused

//RUN THIS EVERY IN GAME SECOND///
if lastsecond != seconds
{
    lastsecond = seconds;
    if stageTime &gt; 0 and !stageTimePaused
    {
        stageTime--;
        if (stageAlarm and player.alive) {audio_play_sound(snd_alarm, 2, 0);}
    }
}
//////////////////////////////////

stageAlarm = (stageTime &lt;= 30);
//if stageTime &lt;= 30 {stageAlarm = true;}
if stageTime &lt;= 0 {player.hp = 0;}

if inputmanager.menu_press
{  
    if !instance_exists(menumanager)
    {
        with instance_create(0, 0, menumanager)
        {
            pauseMenu = true;
            menuEnabled = true;
            inputEnabled = true;
            
            //old_disableAI = director.disableAI;
            //old_disablePlayer = director.disablePlayer;
            //old_disableItems = director.disableItems;
        }
        
        //director.disableAI = true;
        //director.disablePlayer = true;
        //director.disableItems = true;
        global.menu_paused = true;
    }
}

//Change shotupgrade sprite
if instance_exists(weapon_parent)
{
    switch weapon_parent.maxprojectiles
    {
        case 1: shotupgradeSpr = spr_nothing; break;
        case 2: shotupgradeSpr = spr_doubleshot; break;
        case 3: shotupgradeSpr = spr_trippleshot; break;
    }
}

//Update hud HP bars over time
if hud_hp != obj_player.hp
{
    var sep = (hud_hp - obj_player.hp);
    if hpbar_wait == 0 {
        hud_hp += (sign(sep)*-1);
        var _delay = hpbar_delay;
        if abs(sep) &gt; 8 then _delay = (_delay/2);
        hpbar_wait = _delay;
    }
    if hpbar_wait &gt; 0 hpbar_wait--;
}

//Update hud score number over time
if hud_scoretext_num != points
{
    var sep = (points - hud_scoretext_num);
    var add = floor(sep / 8)
    if sep &lt;= 2 hud_scoretext_num += sep;
    else if add &lt;= 2 hud_scoretext_num += 2;
    else hud_scoretext_num += add;
}
var scorestring = string(hud_scoretext_num);
var zerostring = "";
hud_scoretext_zeros = hud_scoretext_length - string_length(scorestring);
for(i = 0; i &lt; hud_scoretext_zeros; i++)
{
    zerostring += "0";
}
hud_scoretext_numstring = zerostring+string(hud_scoretext_num);

//Update hud TIME number over time
if hud_timetext_num != stageTime
{
    var sep = (stageTime - hud_timetext_num);
    var add = floor(sep / 8)
    if sep &lt;= 2 hud_timetext_num += sep;
    else if add &lt;= 2 hud_timetext_num += 2;
    else hud_timetext_num += add;
}
var timestring = string(hud_timetext_num);
var zerostring = "";
hud_timetext_zeros = hud_timetext_length - string_length(timestring);
for(i = 0; i &lt; hud_timetext_zeros; i++)
{
    zerostring += "0";
}
hud_timetext_numstring = zerostring+string(hud_timetext_num);

//Update hud hearts over time
if hud_hearttext_num != hearts
{
    var sep = (hearts - hud_hearttext_num);
    var add = floor(sep / 8)
    if sep &lt;= 2 hud_hearttext_num += sep;
    else if add &lt;= 2 hud_hearttext_num += 2;
    else hud_hearttext_num += add;
}

if hud_hearttext_num &lt; 10
{
    hud_hearttext = "0";
}
else
{
    hud_hearttext = "";
}

//Update hud lives over time
if hud_livestext_num != lives
{
    var sep = (lives - hud_livestext_num);
    var add = floor(sep / 8)
    if sep &lt;= 2 hud_livestext_num += sep;
    else if add &lt;= 2 hud_livestext_num += 2;
    else hud_livestext_num += add;
}

if hud_livestext_num &lt; 10
{
    hud_livestext = "0";
}
else
{
    hud_livestext = "";
}

//Update Stage Number
hud_stagetext_num = stageNumber;

//Show mouse cursor when in debug mode
if global.showhitbox
{
    director.hideMouse = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////DEBUG HOTKEYS///
if (inputmanager.disableInput) {exit;}

/////////////////////////
/////////////////////////
if keyboard_check_released(ord("3")) then {instance_create(mouse_x, mouse_y, ai_zombie);}
if keyboard_check_released(ord("4")) then {player.skin_index--;}
if keyboard_check_released(ord("5")) then {player.skin_index++;}

if keyboard_check_released(ord("B")) then {instance_create(mouse_x, mouse_y, ai_axeman);}
if keyboard_check_released(ord("V")) then { with instance_create(mouse_x-8, mouse_y-8, obj_breakable){move_snap(16, 16);} }
if keyboard_check_released(ord("F")) then {instance_create(mouse_x, mouse_y, item_up_whip);}
if keyboard_check_released(ord("G")) then {instance_create(mouse_x, mouse_y, ai_skeleton);}
if keyboard_check_released(ord("H")) then {instance_create(mouse_x, mouse_y, obj_bigheart);}
if keyboard_check_released(ord("I")) then {player.canhurt = !player.canhurt; player.invincible = !player.invincible; player.alarm[3] = -1;}
if keyboard_check_released(ord("J")) then {player.x = mouse_x; player.y = mouse_y;}
if keyboard_check_released(ord("K")) then {instance_create(mouse_x, mouse_y, item_up_chicken);}
if keyboard_check_released(ord("M")) then {instance_create(mouse_x, mouse_y, item_up_shot);}
if keyboard_check_released(ord("N")) then {instance_create(mouse_x, mouse_y, obj_candle);}
if keyboard_check_released(ord("Q")) then {player.hp -= 4;}
if keyboard_check_released(ord("E")) then {player.hp += 8; player.dieonce = true;}
if keyboard_check_released(ord("Y")) then {instance_create(mouse_x, mouse_y, choose(item_money_small,item_money_med,item_money_big,item_money_huge));}

if keyboard_check_released(ord("R")) then {room_restart();}
if keyboard_check_released(ord("T")) then {global.showhitbox = !global.showhitbox;}
if keyboard_check_released(ord("U")) then {global.debugshowcamera = !global.debugshowcamera;}

if keyboard_check_released(vk_f2) then {realhud = !realhud;}
if keyboard_check_released(vk_f3) then {stageTime+=15;}
if keyboard_check_released(vk_f11) then {draw_hud = !draw_hud;}
/////////////////////////
/////////////////////////
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player)
{
    oldPlayerWhip = player.whip;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if string_count("level", room_get_name(room)) &lt; 1
{instance_destroy(); exit;}

background_colour = c_black;

if instance_exists(player)
{
    UpdateWeapon();
    if !instance_exists(obj_camera) then instance_create(x, y, obj_camera);
    if !instance_exists(obj_debugbox) then instance_create(x, y, obj_debugbox);
    //if instance_exists(obj_camera) then instance_destroy(obj_camera);
    //instance_create(x, y, obj_camera)
    view_hborder[0] = 160;
    view_vborder[0] = 31;
    //view_object[0] = obj_camera;
    
    if hearts &lt; heartsDefault {hearts = heartsDefault;}
    
    //stageTime = stageTimeDefault;
    if oldPlayerWhip != -1
    {
        player.whip = oldPlayerWhip
        oldPlayerWhip = -1;
    }
    
    stageTime = 5;
    if !instance_exists(room_info)
    {
        stageTime = max(stageTimeDefault, stageTime);
    }
    else if !playerDied //If player DID NOT die and ROOM_INFO does exist
    {
        var _setTime = room_info.room_time;
        if _setTime == -1 {_setTime = stageTimeDefault;}
        stageTime = max(_setTime, stageTime);
    }
}

if playerDied
{
    weapon = WEP_NONE;
    UpdateWeapon();
    hearts = heartsDefault;
    player.whip = 1;
    
    game_play_room_music();
    print("PLAYER DIED ROOM RESET");

    if checkpoint != -1
    {
        var _obj = -1;
        var _time = -1;
        var _camX = -999;
        var _camY = -999;
        with obj_checkpoint
        {
            if image_blend == gamemanager.checkpoint
            {
                _obj = spawnObj;
                _time = newTime;
                if camPosObj
                {
                    _camX = camPosObj.x;
                    _camY = camPosObj.y;
                }
            }
        }
        
        if _time != -1 {stageTime = _time;}
        
        if instance_exists(_obj)
        {
            player.x = _obj.x;
            player.y = _obj.y;
            
            if _camX != -999
            {
                //print(_camX);
                //print(_camY);
                obj_camera.x = _camX;
                obj_camera.y = _camY;
                viewx = _camX;
                viewy = _camY;
                obj_camera.movingEnabled = false;
                obj_camera.alarm[0] = 2;
                
            }
        }
    }
    else
    {
        if !instance_exists(room_info)
        {
            stageTime = max(stageTimeDefault, stageTime);
        }
        else
        {
            //if room_info.room_time == -1
            //{
                //stageTime = max(stageTimeDefault, stageTime);
                stageTime = max(room_info.room_time, stageTime);
            //}
        }
    }
    playerDied = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !draw_hud or (room == level_rewardroom) then exit;

//Draw black area for HUD at the top of the screen
draw_rectangle_colour(viewx,viewy,viewx+view_wview[0],viewy+hud_height,c_black,c_black,c_black,c_black,0)
draw_set_halign(fa_left);
draw_set_valign(fa_top);

if realhud
{
    draw_set_font(font_hud);
    
    //player text
    draw_text(hud_playertext_x + viewx, hud_playertext_y + viewy, hud_playertext);
    
    //score text
    draw_text(hud_scoretext_x + viewx, hud_scoretext_y + viewy, hud_scoretext);
    draw_text(hud_scoretext_x + viewx + hud_scoretext_sep, hud_scoretext_y + viewy, hud_scoretext_numstring);
    draw_line_width(hud_scoretext_x + viewx+ hud_scoretext_sep-10, hud_scoretext_y + viewy+8,
     hud_scoretext_x + viewx+ hud_scoretext_sep-2, hud_scoretext_y + viewy+8, 2);
    
    //time text
    draw_text(hud_timetext_x + viewx, hud_timetext_y + viewy, hud_timetext);
    draw_text(hud_timetext_x + viewx + hud_timetext_sep, hud_timetext_y + viewy, hud_timetext_numstring);
    
    //stage text
    draw_text(hud_stagetext_x + viewx, hud_stagetext_y + viewy, hud_stagetext);
    draw_text(hud_stagetext_x + viewx + hud_stagetext_sep, hud_stagetext_y + viewy, hud_stagetext_num);
     
    //enemy text
    draw_text(hud_enemytext_x + viewx, hud_enemytext_y + viewy, hud_enemytext);
    
    //hearts text
    draw_text(hud_hearttext_x + viewx, hud_hearttext_y + viewy, hud_hearttext + string(hud_hearttext_num));
    draw_sprite(spr_bigheart, 0, hud_hearttext_x + viewx-17, hud_hearttext_y + viewy+8);
    draw_line_width(hud_hearttext_x + viewx-11, hud_hearttext_y + viewy+8,
     hud_hearttext_x + viewx-3, hud_hearttext_y + viewy+8, 2);
     
    //lives text
    draw_text(hud_livestext_x + viewx, hud_livestext_y + viewy, hud_livestext + string(hud_livestext_num));
    draw_text(hud_livestext_x + viewx-21, hud_livestext_y + viewy, "P");
    //draw_sprite(spr_bigheart, 0, hud_hearttext_x + viewx-17, hud_hearttext_y + viewy+8);
    draw_line_width(hud_livestext_x + viewx-11, hud_livestext_y + viewy+8,
     hud_livestext_x + viewx-3, hud_livestext_y + viewy+8, 2);
    
    //itembox
    var _boxSprite = spr_itembox;
    if settings.noweapons then _boxSprite = spr_itembox_cross;
    draw_sprite(_boxSprite, 0, hud_itembox_x + viewx, hud_itembox_y + viewy);
    DrawWeaponIcon();
    
    //Doubleshot icon
    draw_sprite(shotupgradeSpr, 0, hud_shotupgrade_x + viewx-17, hud_shotupgrade_y + viewy+8);
    
    //Modifier icons
    if settings.onehit
    {draw_sprite(spr_mod_onehit, 0, hud_shotupgrade_x + viewx-4, hud_shotupgrade_y + viewy+3);}
    
    if settings.permadeath
    {draw_sprite(spr_mod_permadeath, 0, hud_shotupgrade_x + viewx+8, hud_shotupgrade_y + viewy+3);}
    
    if settings.nowhips
    {draw_sprite(spr_mod_nowhips, 0, hud_shotupgrade_x + viewx-4, hud_shotupgrade_y + viewy+15);}
    
    if settings.noweapons
    {draw_sprite(spr_mod_noweapons, 0, hud_shotupgrade_x + viewx+8, hud_shotupgrade_y + viewy+15);}
    
}

var bar_width = 3;
var number_bars = 16;
var padding = bar_width + 2;

var xx = hpbar_x + viewx;
var yy = hpbar_y + viewy;

for(var index = 0; index &lt; number_bars; index++)
{
    if hud_hp &gt; index
    {
        draw_sprite(spr_healthbar, 1, xx, yy);
    }
    else
    {
        draw_sprite(spr_healthbar, 0, xx, yy);
    }
    
    xx += padding;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
