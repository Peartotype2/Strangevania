<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_inputmanager</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>manager_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create event
selectingControlType = false;
disableInput = false;

enum control
{
    keyboard = 0,
    xbox = 1,
    playstation = 2,
    nintendoswitch = 3,
    
    last_index
}

control_type = control.keyboard;
preferred_gamepad = control.xbox;

oldMouseX = window_mouse_x;
oldMouseY = window_mouse_y;
mouseHideTime = 5*room_speed; // 5 seconds

konamiCurrent = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>director.hideMouse = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !disableInput
{
    any_press = keyboard_check_released(vk_anykey) or gamepad_anybutton_pressed();
    menu_press = keyboard_check_pressed(vk_escape) or gamepad_button_check_pressed(0, gp_start);
    
    up_press = keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord("W")) or gamepad_button_check_pressed(0, gp_padu);
    down_press = keyboard_check_pressed(vk_down) or keyboard_check_pressed(ord("S")) or gamepad_button_check_pressed(0, gp_padd);
    left_press = keyboard_check_pressed(vk_left) or keyboard_check_pressed(ord("A")) or gamepad_button_check_pressed(0, gp_padl);
    right_press = keyboard_check_pressed(vk_right) or keyboard_check_pressed(ord("D")) or gamepad_button_check_pressed(0, gp_padr);
    
    up_held = keyboard_check(vk_up) or keyboard_check(ord("W")) or gamepad_button_check(0, gp_padu);
    down_held = keyboard_check(vk_down) or keyboard_check(ord("S")) or gamepad_button_check(0, gp_padd);
    left_held = keyboard_check(vk_left) or keyboard_check(ord("A")) or gamepad_button_check(0, gp_padl);
    right_held = keyboard_check(vk_right) or keyboard_check(ord("D")) or gamepad_button_check(0, gp_padr);
    
    up_released = keyboard_check_released(vk_up) or keyboard_check_released(ord("W")) or gamepad_button_check_released(0, gp_padu);
    down_released = keyboard_check_released(vk_down) or keyboard_check_released(ord("S")) or gamepad_button_check_released(0, gp_padd);
    left_released = keyboard_check_released(vk_left) or keyboard_check_released(ord("A")) or gamepad_button_check_released(0, gp_padl);
    right_released = keyboard_check_released(vk_right) or keyboard_check_released(ord("D")) or gamepad_button_check_released(0, gp_padr);
    
    jump_press = keyboard_check_pressed(ord("X")) or keyboard_check_pressed(vk_space) or gamepad_button_check_pressed(0, gp_face1);
    attack_press = keyboard_check_pressed(ord("Z")) or keyboard_check_pressed(vk_enter) or gamepad_button_check_pressed(0, gp_face3);
    weapon_press = keyboard_check_pressed(ord("C")) or keyboard_check_pressed(vk_rshift) or gamepad_button_check_pressed(0, gp_face4);
    
    weapon_held = keyboard_check(ord("C")) or keyboard_check(vk_rshift) or gamepad_button_check(0, gp_face4);
    
    menu = self;
    menu.escape_press = keyboard_check_pressed(vk_escape) or gamepad_button_check_pressed(0, gp_start);
    menu.escape_held = keyboard_check(vk_escape) or gamepad_button_check(0, gp_start);
    menu.back_press = keyboard_check_pressed(ord("X")) or keyboard_check_pressed(vk_backspace) or gamepad_button_check_pressed(0, gp_face2);
    
        var AttackKey = keyboard_check_pressed(ord("Z"));
        var SpaceKey = keyboard_check_pressed(vk_space);
        var EnterKey = keyboard_check_pressed(vk_enter);
        var ControllerButton = gamepad_button_check_pressed(0, gp_face1); // A on XBox or cross on PS
    menu.accept_press = AttackKey or SpaceKey or EnterKey or ControllerButton;
}
else
{
    any_press           = false;
    menu_press          = false;
    up_press            = false;
    down_press          = false;
    left_press          = false;
    right_press         = false;
    up_held             = false;
    down_held           = false;
    left_held           = false;
    right_held          = false;
    up_released         = false;
    down_released       = false;
    left_released       = false;
    right_released      = false;
    jump_press          = false;
    attack_press        = false;
    weapon_press        = false;
    
    menu = self;
    menu.escape_press   = false;
    menu.back_press     = false;
    menu.accept_press   = false;
}
////Change button prompts depending on input////

if gamepad_anybutton_pressed() and !selectingControlType
{
    control_type = preferred_gamepad;
}

if keyboard_check_released(vk_anykey) and !selectingControlType
{
    control_type = control.keyboard;
}

////Hide Cursor if using gamepad or unmoved for a time/////

mouse_moved = false;
if oldMouseX != window_mouse_x or oldMouseY != window_mouse_y
{
    mouse_moved = true;
    director.hideMouse = false;
    alarm[0] = mouseHideTime;
    
    oldMouseX = window_mouse_x;
    oldMouseY = window_mouse_y;
}

if gamepad_anybutton_pressed()
{
    director.hideMouse = true;
}





/* __ ______  _  _____   __  _______   _________  ___  ____
  / //_/ __ \/ |/ / _ | /  |/  /  _/  / ___/ __ \/ _ \/ __/
 / ,&lt; / /_/ /    / __ |/ /|_/ // /   / /__/ /_/ / // / _/  
/_/|_|\____/_/|_/_/ |_/_/  /_/___/   \___/\____/____/___/  */

//konamiCurrent
var _konamiCode = a1(vk_up, vk_up, vk_down, vk_down, vk_left, vk_right, vk_left, vk_right, ord("X"), ord("Z"));

if (konamiCurrent &lt; array_length_1d(_konamiCode))
{
    if keyboard_check_pressed(vk_anykey)
    {
        if keyboard_check_pressed(_konamiCode[konamiCurrent])
        {
            if _konamiCode[konamiCurrent] == ord("X") then menu.back_press = false; //Prevent backing out of menu this far in code sequence.
            konamiCurrent++;
        } else {
            konamiCurrent = 0;
        }
  }
} else {
    KonamiCode();
    konamiCurrent = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
