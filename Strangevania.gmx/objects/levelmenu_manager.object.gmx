<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>manager_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menumanager.menuEnabled = false;
back_pressed = false;
accept_pressed = false;

menu_alpha = 0;
menu_close = false;

h_off = 8;
pos = 0;
_selected = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !menu_close
{
    if instance_exists(obj_fadeto) then exit; //If fading into a level, don't allow interaction with menu    

    if inputmanager.up_press {pos--; h_off = 8; audio_play_sound(snd_tick, 0, 0);}
    if inputmanager.down_press {pos++; h_off = 8; audio_play_sound(snd_tick, 0, 0);}
    pos = clamp(pos, 0, levelmanager.level_count-1);

    if inputmanager.menu.accept_press
    {
        accept_pressed = true;
    }
    
    if inputmanager.menu.back_press or inputmanager.menu.escape_press
    {
        back_pressed = true;
    }

    if accept_pressed
    {
        var _level = levelmanager.level_list[| pos];
        var _unlocked = _level[? "unlocked"];
        if _unlocked
        {
            audio_play_sound(snd_select, 0, 0);
            level_start(_level);
        }
        else
        {
            audio_play_sound(snd_error, 0, 0);
        }
        accept_pressed = false;
    }
    
    if inputmanager.weapon_press
    {
        audio_play_sound(snd_select, 0, 0);
        menumanager.menu_level = menulevel.modmenu;
        instance_create(0, 0, modmenu_manager);
        menu_close = true;
        
    }
    
    if back_pressed
    {
        audio_play_sound(snd_select, 0, 0);
        menumanager.menu_level = menulevel.main;
        menumanager.pos = 0;
        menumanager.menuEnabled = true;
        
        menu_close = true;
    }
    
    var _inc = 0.35//0.125;
    if menu_alpha &lt; 1 then menu_alpha += _inc;
    else menu_alpha = 1;
}
else
{// if menu_close
    var _inc = 0.35//0.2;
    if menu_alpha &gt; 0 then menu_alpha -= _inc;
    else
    {
        menu_alpha = 0;
        
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_set_alpha(menu_alpha);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);


var _spacing = 4;

var _id = 0;
var _x = vieww/2;
var _y = viewh/2;
var _w = 128;
var _h = 8;

_yoff = 0;
for(i=0;i&lt;levelmanager.level_count;i++)
{
    _selected = false;
    if i == pos
    {
        _selected = true;
        h_off += 1;
        h_off = clamp(h_off, _h, _h*2);
    }
    //var hh = iif(_selected, _h*2, _h)
    //var _yoff = i*(_spacing+_h);
    level_draw_option(i, _x-(_w/2), _y-(_h/2)+_yoff, _w, _h);
    _yoff += (_spacing+_h);
}


draw_set_valign(fa_middle);
draw_set_halign(fa_right);

//Draw back button prompt
var bp_scale = (1/16)*3;
draw_text_transformed_colour(vieww-22, viewh-12, "Back", 0.75, 0.75, 0,
    c_white, c_white, c_ltgray, c_ltgray, menu_alpha);
draw_sprite_ext(bp_back_lt, inputmanager.control_type, vieww-12, viewh-12,
    bp_scale, bp_scale, 0, c_white, menu_alpha);
    
//Modifiers Text
draw_set_halign(fa_left);
draw_text_transformed_colour(20, viewh-12, "Modifiers", 0.75, 0.75, 0,
    c_white, c_white, c_ltgray, c_ltgray, menu_alpha);
draw_sprite_ext(bp_weapon, inputmanager.control_type, 10, viewh-12,
    bp_scale, bp_scale, 0, c_white, menu_alpha);


//Reset draw values
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
