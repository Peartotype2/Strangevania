<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menumanager</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>manager_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuEnabled = false;
inputEnabled = true;
pauseMenu = false;
pauseBgrAlpha = 0;
pauseBgrAlphaTarget = 0.4;
pauseBgrAlphaInc = 0.025;

finaleTextColor = (stat_get("FINISHED_GAME") and !settings.oldmenu and room == intro)

canHold = true;

enum menulevel
{
    main, //0
    options, //1
    exitgame, //2
    volume, //3
    display, //4
    unlocks, //5
    achievements, //6
    styles, //7
    levels,
    settingsmenu,
    statsmenu,
    modmenu,
    songsmenu,
    CRT,
    changelog,
    
}

go_back = false;
initStep = true;

mastervol = "%" + string(round(director.mastervolume*100))
musicvol = "%" + string(round(director.musicvolume*100))
sfxvol = "%" + string(round(director.sfxvolume*100))

mmfullscreen = director.fullscreen;
prev_mmfullscreen = mmfullscreen;

if mmfullscreen {fcheck = "ON"}
else {fcheck = "OFF"}

prev_res = director.res_id;

menuX = viewx+vieww/2;
menu_lerp_default = viewh+48;
menu_lerp = menu_lerp_default;
menu_lerp_target = 0;
menuY_default = viewh/2;
menuY = viewh/2;

menu_scale = 1;
op_border = 4;
op_space = 24;

op_shake_frames = 0;
op_shake_length = 4;
op_shake_min    = -1;
op_shake_max    = 1;

pos = 0;

//Main Menu
option[menulevel.main, 0] = "PLAY GAME"
option[menulevel.main, 1] = "SETTINGS"
option[menulevel.main, 2] = "UNLOCKS"
option[menulevel.main, 3] = "EXIT"

//Settings menu
option[menulevel.options, 0] = "DISPLAY"
option[menulevel.options, 1] = "VOLUME"
option[menulevel.options, 2] = "OTHER"
option[menulevel.options, 3] = "BACK"

//Exit menu
option[menulevel.exitgame, 0] = "NO"
option[menulevel.exitgame, 1] = "YES"

//Volume menu
option[menulevel.volume, 0] = "MASTER " + mastervol
option[menulevel.volume, 1] = "MUSIC " + musicvol
option[menulevel.volume, 2] = "SFX " + sfxvol
option[menulevel.volume, 3] = "BACK"

//Display menu
option[menulevel.display, 0] = "FULLSCREEN " + fcheck;
option[menulevel.display, 1] = "&lt;" + director.res_text + "&gt;"; //Resolution
option[menulevel.display, 2] = "APPLY"
option[menulevel.display, 3] = "CRT EFFECTS"
option[menulevel.display, 4] = "BACK"

//Unlocks menu
option[menulevel.unlocks, 0] = "ACHIEVEMENTS"
option[menulevel.unlocks, 1] = "STYLES"
option[menulevel.unlocks, 2] = "STATS"
option[menulevel.unlocks, 3] = "SONGS"
option[menulevel.unlocks, 4] = "BACK"

//Achievement menu
option[menulevel.achievements, 0] = "BACK"

//Styles menu
option[menulevel.styles, 0] = "BACK"

//Levels menu
option[menulevel.levels, 0] = "BACK"

//Mod menu
option[menulevel.modmenu, 0] = "BACK"

//Songs menu
option[menulevel.songsmenu, 0] = "BACK"
/*var _slist = musicmanager.allsongs_list;
var _len = ds_list_size(_slist);
for (s = 0; s &lt; _len; s++)
{
    var _filename   =    _slist[| s];
    var _soundasset =    asset_get_index(_filename);
    var _sinfo      =    music_get_info(_soundasset);
    var _title      =    _sinfo[0];
    var _artist     =    _sinfo[1];
    
    option[menulevel.songsmenu, s] = (_title + " from " + _artist)
}*/


op_length = 0;
menu_level = 0;

new_text_index = 0;
new_text_index_max = sprite_get_number(spr_new_unlock);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canHold = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*director.disableAI = old_disableAI;
director.disablePlayer = old_disablePlayer;
director.disableItems = old_disableItems*/
global.menu_paused = false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !menuEnabled then exit;

if initStep
{
    if pauseMenu
    {
        //menuY_default = ((viewh/4)*3);
        
        option[menulevel.main, 0] = "RESUME"
        option[menulevel.main, 2] = "MAIN MENU"
        option[menulevel.main, 3] = "null"
    }
    initStep = false;
}

menu_lerp = lerp(menu_lerp, menu_lerp_target, 0.2);
menuY = viewy+menuY_default + menu_lerp ;

menuX = viewx+vieww/2;

if inputEnabled
{
    up_key = inputmanager.up_press//keyboard_check_pressed(vk_up);
    down_key = inputmanager.down_press//keyboard_check_pressed(vk_down);
    
    left_key = inputmanager.left_press//keyboard_check_pressed(vk_left);
    right_key = inputmanager.right_press//keyboard_check_pressed(vk_right);
    left_held = inputmanager.left_held
    right_held = inputmanager.right_held
    
    accept_key = inputmanager.menu.accept_press;
    back_key = inputmanager.menu.back_press;
    
    esc_key = inputmanager.menu.escape_press;
    changelog_key = inputmanager.weapon_press;
}
else
{
    up_key          = false;
    down_key        = false;
    left_key        = false;
    right_key       = false;
    left_held       = false;
    right_held      = false;
    accept_key      = false;
    back_key        = false;
    esc_key         = false;
    changelog_key   = false;
}

if changelog_key and menu_level == menulevel.main and !pauseMenu
{
    audio_play_sound(snd_select, 0, 0)
    menu_level = menulevel.changelog;
    instance_create(0,0,changelogmenu_manager);
    exit;
}

if esc_key
{
    /*if room == intro
    {
        if !instance_exists(obj_fadeto) {roomFadeTo(room);}
    }
    else */if pauseMenu
    {
        inputEnabled = false;
        menu_lerp_target = menu_lerp_default;
        pauseBgrAlphaTarget = 0;
        pauseBgrAlphaInc = (pauseBgrAlphaInc*-1);
        alarm[0] = 0.5*room_speed;
    }
}

op_length = array_length_2d(option, menu_level);
if menu_level == 0 and pauseMenu {op_length--}

var oldPos = pos;
pos += down_key - up_key;

//Disable looping up and down through options when on the Exit menu
if menu_level == menulevel.exitgame
{
    if pos &gt;= op_length {pos = op_length-1};
    if pos &lt; 0 {pos = 0}
}
else
{
    if pos &gt;= op_length {pos = 0};
    if pos &lt; 0 {pos = op_length-1}
}

if oldPos != pos //If position changed
{  
    //audio_play_sound(snd_tick, 0, 0);
    //var _pitchMult = clamp(percent(pos, 1, op_length+1), 0.25, 1)
    //var _pitch = (0.75*_pitchMult)
    var _pitch = 0.65 - (pos*0.10);
    _pitch = clamp(_pitch, 0.2, 1);
    play_sound_pitched(snd_tick, _pitch)
    op_shake_frames = op_shake_length;
}

//If not on style menu, delete it's manager object
/*if menu_level != menulevel.styles
{
    with stylemenu_manager {instance_destroy()};
}*/


//Volume controls
if menu_level == menulevel.volume and (left_held or right_held)//(left_key or right_key)
{
    if (inputmanager.left_released or inputmanager.right_released)
    {canHold = true; alarm[1] = -1;}

    var amount = 0.05;
    var holdDelay = 3;
    if left_held then amount *= (-1)//-0.1;
    
    if (canHold)
    {
        audio_play_sound(snd_select, 0, 0)
        switch(pos)
        {
            //Master
            case 0:
                var vol = director.mastervolume;
                vol += amount;
                if vol &lt; 0 vol = 0;
                if vol &gt; 1 vol = 1;
                director.mastervolume = vol;
                UpdateAudioVolume();
                op_shake_frames = op_shake_length;
            break;
            
            //Music
            case 1:
                var vol = director.musicvolume;
                vol += amount;
                if vol &lt; 0 vol = 0;
                if vol &gt; 1 vol = 1;
                director.musicvolume = vol;
                UpdateAudioVolume();
                op_shake_frames = op_shake_length;
            break;
            
            //SFX 
            case 2:
                var vol = director.sfxvolume;
                vol += amount;
                if vol &lt; 0 vol = 0;
                if vol &gt; 1 vol = 1;
                director.sfxvolume = vol;
                UpdateAudioVolume();
                op_shake_frames = op_shake_length;
            break;
        }
        
        canHold = false;
        alarm[1] = holdDelay;
    }
}

//Display Resolution controls
if menu_level == menulevel.display and (left_key or right_key)
{
    switch(pos)
    {
        //Fullscreen
        case 0:
            mmfullscreen = !mmfullscreen;
            audio_play_sound(snd_select, 0, 0);
            op_shake_frames = op_shake_length;
        break;
    
        //Resolution option
        case 1:
            if mmfullscreen {audio_play_sound(snd_error, 0, 0);}
            else
            {
                var amount = 1; 
                if left_key then amount = -1;
                audio_play_sound(snd_select, 0, 0)
                op_shake_frames = op_shake_length;
                
                //prev_res = director.res_id;
                var newid = director.res_id;
                newid += amount;
                if newid &lt; 0 {newid = director.res_max;}
                if newid &gt; director.res_max {newid = 0;}
                
                var arr = director.res_array
                var dw = display_get_width();
                var dh = display_get_height();
                
                while arr[newid, 0] &gt; dw or arr[newid, 1] &gt; dh
                {
                    newid += amount;
                    if newid &lt; 0 {newid = director.res_max;}
                    if newid &gt; director.res_max {newid = 0;}
                }
                
                director.res_id = newid;
                
                //var w = director.res_array[director.res_id, 0];
                //var h = director.res_array[director.res_id, 1];
                //ChangeResolution(w, h);
            }
        break;
    }
}

//Menu controls when hitting accept keys
if accept_key
{
    if !(menu_level == menulevel.volume and pos == 2)
     and !(menu_level == menulevel.display and pos == 1 and mmfullscreen)
    {audio_play_sound(snd_select, 0, 0);}
    var _sml = menu_level;
    
    switch(menu_level)
    {
        //Main Menu////////////////////////////////////
        case menulevel.main:
            switch(pos)
            {
                //Start Game
                case 0:
                    if pauseMenu
                    {
                        inputEnabled = false;
                        menu_lerp_target = menu_lerp_default;
                        pauseBgrAlphaTarget = 0;
                        pauseBgrAlphaInc = (pauseBgrAlphaInc*-1);
                        alarm[0] = 0.5*room_speed;
                    }
                    else 
                    {
                        menu_level = menulevel.levels
                        instance_create(vieww/2, viewh/2, levelmenu_manager);
                    }
                break;
                
                //Settings
                case 1:
                    menu_level = menulevel.options;
                break;
                
                //Unlocks (Exit on PAUSE)
                case 2:
                    if pauseMenu
                    {
                        if !instance_exists(obj_fadeto)
                        {                           
                            music_fade_out(500);
                            roomFadeTo(intro);
                            inputEnabled = false;
                        }
                    }
                    else
                    {
                        menu_level = menulevel.unlocks;
                    }
                break;
                
                //Exit (Doesn't exist on PAUSE)
                case 3: 
                    /*if pauseMenu
                    {
                        if !instance_exists(obj_fadeto)
                        {
                            audio_sound_gain(snd_music4, 0, 500);
                            roomFadeTo(intro);
                        }
                    }
                    else
                    {*/
                        menu_level = menulevel.exitgame;
                    //}
                break;
            }
        break;
        /////////////////////////////////////////////
        
        //Settings menu////////////////////////////////////
        case menulevel.options:
            switch(pos)
            {
                //Display
                case 0:
                    menu_level = menulevel.display;
                break;
                
                //Volume
                case 1:
                    menu_level = menulevel.volume;
                break;
                
                //Other Settings
                case 2:
                    menu_level = menulevel.settingsmenu;
                    instance_create(vieww/2, viewh/2, settingsmenu_manager);
                break;
                
                //Back
                case 3:
                    go_back = true;//menu_level = 0;
                break;
            }
        break;
        /////////////////////////////////////////////
        
        //UNLOCKS MENU//////////////////////////////////
        case 5:
            switch(pos)
            {
                case 0: //ACHIEVEMENTS
                    menu_level = menulevel.achievements;
                    instance_create(vieww/2, viewh/2, achmenu_manager);
                break;
                
                case 1: //STYLES
                    menu_level = menulevel.styles;
                    instance_create(vieww/2, viewh/2, stylemenu_manager);
                break;
                
                case 2: //STATS
                    menu_level = menulevel.statsmenu;
                    instance_create(vieww/2, viewh/2, statsmenu_manager);
                break;
                
                case 3: //SONGS
                    menu_level = menulevel.songsmenu;
                    instance_create(vieww/2, viewh/2, songsmenu_manager);
                break;
                
                case 4: //BACK
                    go_back = true;//menu_level = 0;
                break;
            }
        break;
        ///////////////////////////////////////////////
            //ACHIEVEMENTS MENU//////////////////////////////////
            case menulevel.achievements:
                switch(pos)
                {
                    case 0: //BACK
                        go_back = true;//menu_level = 5;
                    break;
                }
            break;
            ////////////////////////////////////////////////////
            //STYLES MENU//////////////////////////////////
            case menulevel.styles:
                switch(pos)
                {
                    case 0: //BACK
                        go_back = true;//menu_level = 5;
                    break;
                }
            break;
            ////////////////////////////////////////////////////
        
        //Exit menu////////////////////////////////////
        case menulevel.exitgame:
            switch(pos)
            {
                //No
                case 0:
                    go_back = true;//menu_level = 0;
                break;
                
                //Yes
                case 1:
                    if pauseMenu
                    {
                        if !instance_exists(obj_fadeto)
                        {
                            //audio_sound_gain(snd_music4, 0, 500);
                            music_fade_out(500);
                            roomFadeTo(intro);
                        }
                    }
                    else
                    {
                        if !instance_exists(obj_fadeto)
                        {
                            menumanager.inputEnabled = false;
                            //audio_sound_gain(snd_music3, 0, 500)
                            music_fade_out(500);
                            
                            if !stat_get("FINISHED_GAME")
                            {
                                audio_play_sound(snd_laugh, 1, 0);
                            }
                            if audio_is_playing(snd_wind)
                            {
                                audio_sound_gain(snd_wind, 0, 1000);
                            }
                            
                            roomFadeTo(closegame, 0.025);
                        }
                    }
                break;
            }
        break;
        /////////////////////////////////////////////
        
        //Volume menu////////////////////////////////////
        case menulevel.volume:
            switch(pos)
            {
                //Master
                case 0:
                    var vol = director.mastervolume;
                    vol -= 0.10;
                    if vol &lt; 0 vol = 1;
                    if vol &gt; 1 vol = 0;
                    director.mastervolume = vol;
                    UpdateAudioVolume();
                    op_shake_frames = op_shake_length;
                break;
                
                //Music
                case 1:
                    var vol = director.musicvolume;
                    vol -= 0.10;
                    if vol &lt; 0 vol = 1;
                    if vol &gt; 1 vol = 0;
                    director.musicvolume = vol;
                    UpdateAudioVolume();
                    op_shake_frames = op_shake_length;
                break;
                
                //SFX 
                case 2:
                    var snd = choose(snd_hit, snd_fall, snd_whip, snd_kill, snd_upgrade,
                    snd_hurt, snd_heart, snd_crash, snd_break);
                    audio_play_sound(snd, 0, 0);
                    op_shake_frames = op_shake_length;
                break;
                
                //Back
                case 3:
                    go_back = true;//menu_level = 1;
                break;
            }
        break;
        /////////////////////////////////////////////
        
        //Display menu////////////////////////////////////
        case menulevel.display:
            switch(pos)
            {
                //Fullscreen
                case 0:
                    /*var fs = director.fullscreen;
                    fs = !fs
                    director.fullscreen = fs;*/
                    //prev_mmfullscreen = mmfullscreen;
                    mmfullscreen = !mmfullscreen;
                    op_shake_frames = op_shake_length;
                break;
                
                //Resolution
                case 1:
                    if mmfullscreen {audio_play_sound(snd_error, 0, 0);}
                    else
                    {
                        var amount = 1;
                        
                        //prev_res = director.res_id;
                        var newid = director.res_id;
                        newid += amount;
                        if newid &lt; 0 {newid = director.res_max;}
                        if newid &gt; director.res_max {newid = 0;}
                        
                        var arr = director.res_array
                        var dw = display_get_width();
                        var dh = display_get_height();
                        if arr[newid, 0] &gt;= dw or arr[newid, 1] &gt;= dh
                        {
                            newid = 0;
                            //newid += amount;
                            //if newid &lt; 0 {newid = director.res_max;}
                            //if newid &gt; director.res_max {newid = 0;}
                        }
                        
                        director.res_id = newid;
                        op_shake_frames = op_shake_length;
                    }
                break;
                
                //Apply
                case 2:
                    if mmfullscreen != director.fullscreen
                    {
                        director.fullscreen = mmfullscreen;
                        prev_mmfullscreen = mmfullscreen;
                    }
                    
                    if prev_res != director.res_id
                    {
                        prev_res = director.res_id;
                        if !mmfullscreen
                        {
                            var w = director.res_array[director.res_id, 0];
                            var h = director.res_array[director.res_id, 1];
                            ChangeResolution(w, h);
                        }
                    }
                break;
                
                //CRT EFFECTS MENU
                case 3:
                    menu_level = menulevel.CRT;
                    instance_create(vieww/2, viewh/2, crtmenu_manager);
                break;
                
                //Back
                case 4:
                    if prev_res != director.res_id {director.res_id = prev_res;}
                    if prev_mmfullscreen != mmfullscreen {mmfullscreen = prev_mmfullscreen;}
                    menu_level = 1;
                break;
            }
        break;
        /////////////////////////////////////////////
    }
    
    if _sml != menu_level {pos = 0};
    op_length = array_length_2d(option, menu_level);
}

//Back button
back = 0;

if back_key {go_back = true;}

if go_back
{
    if menu_level == menulevel.main and pauseMenu == true
    {
        inputEnabled = false;
        menu_lerp_target = menu_lerp_default;
        pauseBgrAlphaTarget = 0;
        pauseBgrAlphaInc = (pauseBgrAlphaInc*-1);
        alarm[0] = 0.5*room_speed;
    }
    else if menu_level != menulevel.main
    {
        var _pos_back = 0;
        switch menu_level
        {
            case menulevel.options: back = menulevel.main; _pos_back = 1; break;
            case menulevel.exitgame: back = menulevel.main; _pos_back = 3; break;
            case menulevel.volume: back = menulevel.options; _pos_back = 1; break;
            case menulevel.display: back = menulevel.options; _pos_back = 0; break;
            case menulevel.unlocks: back = menulevel.main; _pos_back = 2; break;
            case menulevel.achievements: back = menulevel.unlocks; _pos_back = 0; break;
            case menulevel.styles: back = menulevel.unlocks; _pos_back = 1; break;
        }
    
        if menu_level == menulevel.display //If on display menu don't apply unsaved changes
        {
            if prev_res != director.res_id {director.res_id = prev_res;}
            if prev_mmfullscreen != mmfullscreen {mmfullscreen = prev_mmfullscreen;}
        }
        
        //Play sound effect only if pressing the assigned button to go back
        // and not when selecting the "back" option on a menu since it'll already
        // be played by the menu option selection.
        if back_key {audio_play_sound(snd_select, 0, 0);} 
        
        pos = _pos_back;//0;
        menu_level = back;
        op_length = array_length_2d(option, menu_level);
    }
    go_back = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//option[1, 0] = "Fullscreen " + fcheck;
switch(menu_level)
{
    //Main Menu variables
    case menulevel.main:
        menu_scale = 1.25;
        op_space = 20;
    break;
    
    //Settings menu variables
    case menulevel.options:
        menu_scale = 1;
        op_space = 16;
    break;
    
    //Exit menu variables
    case menulevel.exitgame:
        menu_scale = 1;
        op_space = 18;
    break;
    
    //Volume menu variables
    case menulevel.volume:
        option[3, 0] = "MASTER " + mastervol
        option[3, 1] = "MUSIC " + musicvol
        option[3, 2] = "SFX " + sfxvol
        menu_scale = 1;
        op_space = 16;
    break;
    
    //Display menu variables
    case menulevel.display:
        option[4, 0] = "FULLSCREEN " + fcheck;
        var _res = director.res_text;
        if mmfullscreen then _res = (string(display_get_width())+"x"+string(display_get_height()));
        option[4, 1] = "&lt;" + _res + "&gt;";
        
        menu_scale = 1;
        op_space = 16;
    break;
    
    //Unlocks menu variables
    case menulevel.unlocks:
        menu_scale = 1//1.15;
        op_space = 16//20;
    break;
    
    //Achievements menu variables
    case menulevel.achievements:
        menu_scale = 0.9;
        op_space = 16;
    break;
    
    //Styles menu variables
    case menulevel.styles:
        menu_scale = 0.9;
        op_space = 16;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if pauseMenu
{
    draw_sprite_ext(spr_black, 0, -1, -1, 400, 400, 0, c_white, pauseBgrAlpha);
    if pauseBgrAlpha != pauseBgrAlphaTarget
    {
        pauseBgrAlpha += pauseBgrAlphaInc;
    }
}

if !menuEnabled then exit;

new_text_index++;
if new_text_index &gt;= new_text_index_max then new_text_index = 0;

draw_set_font(font_menu)
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

if mmfullscreen {fcheck = "ON"}
else {fcheck = "OFF"}
mastervol = "%" + string(round(director.mastervolume*100))
musicvol = "%" + string(round(director.musicvolume*100))
sfxvol = "%" + string(round(director.sfxvolume*100))
//director.res_text = (string(director.res_array[director.res_id,0]) + "x" + string(director.res_array[director.res_id,1]))

//EXIT MENU TEXT
if menu_level == 2
{
    var str = "EXIT?"
    var _scale = 1.5;
    var bgr_alpha = 0.5;
    
    var len = string_width(str)
    var height = string_height(str)
    draw_sprite_ext(spr_blackround, 0, menuX, menuY,
     (len/32+(8/32))*_scale, (height/32+(4/32))*_scale, 0, c_white, bgr_alpha); //Tinted bgr
     
    draw_text_transformed_colour(menuX+1, menuY+1, str,
     _scale, _scale, 0, c_black, c_black, c_black, c_black, 1); //Shadow
    draw_text_transformed_colour(menuX, menuY, str,
     _scale, _scale, 0, c_maroon, c_maroon, c_orange, c_orange, 1); //Main Text
     
    if finaleTextColor
    {
        draw_text_transformed_colour(menuX, menuY, str,
         _scale, _scale, 0, c_white, c_white, c_white, c_white, 0.1); //Main Text
    }
}

var _length = op_length;
for(i = 0; i &lt; _length; i++)
{
    //draw_text_ext_transformed(menuX, menuY + op_space*i, option[i],
    // 0, 9999, 0.75, 0.75, 0);
    
    var str = option[menu_level,i];
    
    if str == "null"
    {
        break;
    }
    
    var yoff = 0;
    var xoff = 0;
    var _tCol = c_maroon;
    var _tColSelected = c_red;
    var _tCol2 = c_orange;
    var _scale = menu_scale;
    var _sCol = c_black;
    var _sColSelected = c_maroon;
    var bgr_alpha = 0.5;
    
    //If exit menu
    if menu_level == menulevel.exitgame {yoff = 24}
    
    //If Unlocks menu
    //if menu_level == menulevel.unlocks {yoff = 8}
    
    //If Achievement menu
    if menu_level == menulevel.achievements {yoff = 72}
    
    //If Style menu
    if menu_level == menulevel.styles {yoff = 72}
    
    //if display menu
    if menu_level == menulevel.display
    {
        //if its drawing option 1 (resolution option)
        if i == 1
        {
            //if fullscreen is ON
            if mmfullscreen
            {
                _tCol = c_dkgray;
                _tCol2 = c_gray;
                _tColSelected = c_dkgray;
                _sColSelected = c_black;
            }
            
            //DrawResPreviews();
        }
        
        //if its drawing option 2 (apply) and there are no changes to apply
        if i == 2 and ((prev_mmfullscreen == mmfullscreen) and (prev_res == director.res_id))
        {
            _tCol = c_dkgray;
            _tCol2 = c_gray;
            _tColSelected = c_dkgray;
            _sColSelected = c_black;
        }
        
        
    }
    
    
    //If text selected
    if pos == i
    {
        _sCol = _sColSelected
        _tCol = _tColSelected;
        _scale = 1.25*menu_scale;
        
        if op_shake_frames &gt; 0
        {
            var _shakeX = irandom_range(op_shake_min, op_shake_max);
            var _shakeY = irandom_range(op_shake_min, op_shake_max);
            xoff += _shakeX;
            yoff += _shakeY;
            op_shake_frames--;
        }
    }
    
    var len = string_width(str)
    var height = string_height(str)
    draw_sprite_ext(spr_blackround, 0, menuX+xoff, menuY+yoff + op_space*i,
     (len/32+(8/32))*_scale, (height/32+(4/32))*_scale, 0, c_white, bgr_alpha);
     
    draw_text_transformed_colour(menuX+1+xoff, menuY+yoff + op_space*i+1, str, //Shadow
     _scale, _scale, 0, _sCol, _sCol, _sCol, _sCol, 1);
    draw_text_transformed_colour(menuX+xoff, menuY+yoff + op_space*i, str, //Main text
     _scale, _scale, 0, _tCol, _tCol, _tCol2, _tCol2, 1);
     
    if finaleTextColor
    {
        //draw_text_transformed_colour(menuX+1+xoff, menuY+yoff + op_space*i+1, str, //Shadow
        // _scale, _scale, 0, c_white, c_white, c_white, c_white, 0.25);
        draw_text_transformed_colour(menuX+xoff, menuY+yoff + op_space*i, str, //Main text
         _scale, _scale, 0, c_white, c_white, c_white, c_white, 0.1);
    }
     
    //If there are unseen new unlocked skins
    var _newSkinCount = (ds_list_size(director.newwhip_list) + ds_list_size(director.newskin_list))
    if (_newSkinCount &gt; 0)
    {
        var _newtextscale = 0.15;
        if (menu_level == menulevel.main and str == "UNLOCKS")
        or (menu_level == menulevel.unlocks and str == "STYLES")
        {
            draw_sprite_ext(spr_new_unlock, new_text_index,
            menuX+xoff+(((len/2)*_scale)+10), (menuY+yoff+op_space*i-1),
            _newtextscale*_scale, _newtextscale*_scale, 0, c_white, 0.95);
        }
    }
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
