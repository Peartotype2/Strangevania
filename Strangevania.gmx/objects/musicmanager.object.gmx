<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>-1</persistent>
  <parentName>manager_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_song = noone;
last_song = noone;
new_song = noone;
paused_song = noone;
volume_mult = 1;
song_name = "";
max_volume = (director.musicvolume*director.musicmult)*volume_mult;

stop_list = ds_list_create();

allsongs_list = ds_list_create();

song_alpha = 0;

initStep = true;

songMenu = false;
showHiddenSongs = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_pause_sound(paused_song);
//paused_song = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init songs list

if initStep
{
    var _snd = sound_get_name(0);
    var n = 0;
    
    //Find first song in asset list
    while string_count("song_", _snd) == 0
    {
        _snd = sound_get_name(n);
        if string_count("song_", _snd) == 0 {n++;}
    }
    
    //Collect all songs
    while string_count("song_", _snd) &gt;= 1
    {
        _snd = sound_get_name(n);
        if string_count("song_", _snd) &gt;= 1
        {
            if music_get_parent(n) == false
            {
                ds_list_add(allsongs_list, _snd)
                
                var _stat = (_snd+"_HEARD");
                stat_register(_stat, _stat, 0, true)
                
                var _knownStat = (_snd+"_KNOWN")
                stat_register(_knownStat, _knownStat, 0, true)
                
                event_register_script(_snd+"_PLAYED", id, stat_set, _stat, 1);
                
                print(string(n) + ": " + _snd + " heard stat init.");
            }
            else {print("SKIPPED SONG "+_snd+" CHILD OF "+sound_get_name(music_get_parent(n)));}
        }
        n++;
    }
    
    initStep = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_volume = (director.musicvolume*director.musicmult)*volume_mult;

if current_song != noone
{
    //var _gain = audio_sound_get_gain(current_song);

    /*if _gain &lt;= 0
    {
        audio_stop_sound(current_song);
    }*/
    
    var _len = ds_list_size(stop_list);
    for(i=0; i&lt;_len; i++)
    {
        var _song = stop_list[| i];
        if !is_undefined(_song) //Band aid fix? POSSIBLE ISSUES DEBUG DEV 
        {
            var _gain = audio_sound_get_gain(_song);
            
            if _gain &lt;= 0
            {
                audio_stop_sound(_song);
                print("MUSIC STOPPED: ", sound_get_name(_song)," ",string(_song));
                ds_list_delete(stop_list, i);
            }
        }
    }

    if !audio_is_playing(current_song)
    {
        if new_song != noone //and audio_is_playing(new_song)
        {
            last_song = current_song;
            current_song = new_song;
            new_song = noone;
        }
        else
        {
            current_song = noone;
        }
    }

    song_name = sound_get_name(current_song);
}
else
{
    song_name = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(stop_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if current_song != noone
{
    settingsMenu = (instance_exists(settingsmenu_manager) or instance_exists(crtmenu_manager));
    if instance_exists(songsmenu_manager) {songMenu = true;}
    else if song_alpha == 0 {songMenu = false;} //Done in this way so will only change to bottom pos after fading out

    if instance_exists(menumanager) and global.menu_paused
    {
        song_alpha = percent(menumanager.pauseBgrAlpha, 0, 0.4)
    }
    else if room == level_gameover or room == intro
    {
        if instance_exists(songsmenu_manager)
        {
            song_alpha = lerp(song_alpha, songsmenu_manager.menu_alpha, 0.1);
        }
        else
        {
            //song_alpha = lerp(song_alpha, inputmanager.menu.escape_held, 0.1);
            song_alpha = lerp(song_alpha, 0, 0.1);
        }
    }
    else
    {
        song_alpha = 0;
        exit;
    }

    if song_alpha == 0 then exit;
    
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_set_font(font_menu);
    
    var _info = music_get_info(current_song);
    var _title = _info[0];
    var _artist = _info[1];
    //var _title = "Song of Healing";
    //var _artist = "Majora's Mask"
    
    var _spriteScale = 0.25;
    
    var _yoff = (viewh)
    if songMenu {_yoff = sprite_get_height(spr_song)*_spriteScale+5}
    if settingsMenu {_yoff = (viewh -(sprite_get_height(spr_song)*_spriteScale+5))}
    
    var _textScale = 0.5;
    draw_text_transformed_colour(viewx+vieww-17+0.5,viewy+_yoff-10+0.5, _title, _textScale, _textScale, 0,
        c_black, c_black, c_black, c_black, song_alpha)
    draw_text_transformed_colour(viewx+vieww-17,viewy+_yoff-10, _title, _textScale, _textScale, 0,
        c_white, c_white, c_ltgray, c_ltgray, song_alpha)
        
    draw_text_transformed_colour(viewx+vieww-17+0.5,viewy+_yoff-4+0.5, _artist, _textScale, _textScale, 0,
        c_black, c_black, c_black, c_black, song_alpha)
    draw_text_transformed_colour(viewx+vieww-17,viewy+_yoff-4, _artist, _textScale, _textScale, 0,
        c_ltgray, c_ltgray, c_gray, c_gray, song_alpha)
        
    draw_sprite_ext(spr_song, 0, viewx+vieww+0, viewy+_yoff-1, _spriteScale, _spriteScale, 0, c_white, song_alpha);
        
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
else
{
    song_alpha = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
