<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>manager_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(obj_camera) &gt; 1 then instance_destroy();
if !instance_exists(obj_camera_collider) {instance_create(x, y, obj_camera_collider);}

camblockEnabled = true;
movingEnabled = true;
camLockYTier = true;

old_x = x;
old_y = y;

viewToY = 0;
viewToX = 0;

image_speed = 0;
xview = x;
yview = y;

target = obj_player;
camLerp = false;
lerpDefault = 0.2;
lerpAmount = lerpDefault;
lerpx = target.x;
lerpy = target.y;

camblockLeft = 0;
camblockRight = 0;
camblockUp = 0;
camblockDown = 0;

xmin = 0;
xmax = room_width;
ymin = 0;
ymax = room_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movingEnabled = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = global.debugshowcamera;

var cw = view_wview[0];
var ch = view_hview[0];
var cx = obj_player.x - cw / 2;
var cy = obj_player.y - ch / 2;
//x = clamp(lerp(x, cx, 0.1), 0, room_width - cw);
//y = clamp(lerp(y, cy, 0.1), 0, room_height - ch);
//x = clamp(cx, 0, room_width - cw);
//y = clamp(cy, 0, room_height - ch);

xview = x;
yview = y;

if camblockLeft
{xmin = camblockLeft+1+(vieww/2)}
else {xmin = 0;}

if camblockRight
{xmax = camblockRight-1-(vieww/2)}
else {xmax = room_width;}

if camblockUp
{ymin = camblockUp+1+(viewh/2)}
else {ymin = 0;}

if camblockDown
{ymax = camblockDown-1-(viewh/2)}
else {ymax = room_height;}

if movingEnabled
{
    if !camLerp
    {  
        //while (x != target.x and !obj_camera_collider._blockHor)
        //{x += sign(target.x - x);}
        
        /*if abs(target.x - x) &gt; player.walksp
        {
            __blockCheck = false
            __distStep = player.walksp;
            __dist = abs(target.x - x);
            with obj_camera_collider
            {
                while other.__blockCheck == false
                {
                    if other.__distStep == other.__dist
                    {
                        other.__blockCheck = true;
                    }
                    else
                    {
                        other.__blockCheck = place_meeting(x+other.__distStep, y, obj_camblock_hor)
                        if !other.__blockCheck
                        {
                            other.__distStep++;
                        }
                    }
                }
            }
            x += (__distStep-1)*sign(target.x - x);
        }
        else
        {
            x = target.x;
        }*/
        x = clamp(target.x, xmin, xmax)
        
        //while (y != target.y and !obj_camera_collider._blockVer)
        //{y += sign(target.y - y);}
        y = (floor(target.y / viewh) * viewh);
            //target.y;
        lerpx = x;
        lerpy = y;
        
        viewToY = floor(y / viewh) * viewh;
    }
    else
    {
        var _distx = distance_to_point(target.x, y);
        var _disty = distance_to_point(x, target.y);
        //show_debug_message(_dist);
        lerpx = lerp(lerpx, target.x, lerpAmount);
        lerpy = lerp(lerpy, target.y, lerpAmount);
        
        if _distx &lt;= 1{lerpx = target.x;}
        if _disty &lt;= 1{lerpy = target.y;}
        
        x = lerpx;
        y = lerpy;
        
        if camLockYTier
        {
            y = (floor(target.y / viewh) * viewh);
            viewToY = floor(y / viewh) * viewh;
        }
        else
        {
            viewToY = y-(viewh/2);
        }
    }

    if InsideView(player.x, player.y)
    {
        if camblockEnabled
        {
            x = clamp(x, xmin, xmax);
            y = clamp(y, ymin, ymax);
        }
    }
}
else
{
    viewToY = y-(viewh/2);
}

viewToX = x-(vieww/2);
//viewToY = y-(viewh/2);

/*var _distToX = abs(view_xview[0] - viewToX);
if _distToX &gt; 2
{
    var _dir = sign(viewToX - view_xview[0]);
    if _dir == 1 and !camblockRight
    {
        view_xview[0] += 1;
    }
    else if _dir == -1 and !camblockLeft
    {
    
    }
}
else
{
    view_xview[0] = clamp(viewToX, 0, room_width-vieww);
}*/
var xdist = abs(viewToX - viewx);
xdir  = sign(viewToX - viewx);
var xspeed = 12;

if !player.onStair
{
    if xdist &gt; 4
    {
        var xchange = 0;
        if xdist &lt; xspeed {xchange += xdist*xdir;}
        else {xchange += xspeed*xdir;}
        viewx = clamp(viewx+xchange, 0, room_width-vieww);
        /*with obj_camera_collider
        {
            while(!place_meeting(obj_camera_collider.x, viewToY, obj_camblock_parent))
            {
                obj_camera_collider.x += xdir
            }
        }*/
    }
    else {view_xview[0] = clamp(viewToX, 0, room_width-vieww);}
}
else {view_xview[0] = clamp(viewToX, 0, room_width-vieww);}

/*else /// THIS ISS A FUCKINNG MESSSSS
{
    if xdist &gt; 4
    {
        stairCamblockDir = iif(xdir == -1, obj_camblock_left, obj_camblock_right);
        with obj_camera_collider
        {
        
            obj_camera.stairCamblockCheck = place_meeting(x, y, obj_camera.stairCamblockDir);
            obj_camera.stairCamblockCheckTo = place_meeting(obj_camera.viewToX, obj_camera.viewToY, obj_camera.stairCamblockDir);
            obj_camera.stairCamblockCheckFinal = false;
        }
        print("stairCamblockCheck ", stairCamblockCheck)
        print("stairCamblockCheckTo ", stairCamblockCheckTo)
        print("stairCamblockCheckFinal ", stairCamblockCheckFinal)
        if !stairCamblockCheck and stairCamblockCheckTo
        {
            while(!stairCamblockCheckFinal)
            {
                with obj_camera_collider
                {
                    obj_camera.stairCamblockCheckFinal = place_meeting(x+obj_camera.xdir, obj_camera.viewToY, obj_camera.stairCamblockDir);
                    x += obj_camera.xdir;
                }
            }
            viewx = obj_camera_collider.x;
        }
        else {view_xview[0] = clamp(viewToX, 0, room_width-vieww);}
    }
    else {view_xview[0] = clamp(viewToX, 0, room_width-vieww);}
}*/

//view_xview[0] = clamp(viewToX, 0, room_width-vieww);
view_yview[0] = clamp(viewToY, 0, room_height-viewh);


if player.y &lt;= view_yview[0]+(view_hview[0]/2)
{
    view_vborder[0] = 96//64;
}
else
{
    view_vborder[0] = 31;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>USED TO BE END STEP EVENT!</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MAKE SURE NO ISSUES</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movingEnabled = false;
//alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//d3d_transform_set_translation(-xview, -yview, 0);
//d3d_set_projection_ortho(xview, yview, 320, 240, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(spr_camera, 0, x, y, 1, 1, 0, c_white, image_alpha);
draw_sprite_ext(spr_camera, 1, viewx+vieww/2, viewy+viewh/2, 1, 1, 0, c_white, image_alpha);

//draw_sprite_ext(spr_camborder, 0, viewx, viewy, 1, 1, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
