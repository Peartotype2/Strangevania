<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_door_editor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>createTrigger = true;
triggerActive = false;
isWall = true;
locked = false;

unlockEvent = -1;
lockEvent = -1;

LEFT = -1;
RIGHT = 1;

open_dir = RIGHT;

player_move_distance = 24;
camera_move_distance = 144;//151;
player_face_direction = "right";
camera_movement_enabled = true;

image_speed = 0;
sprite_index = spr_door;
open = false;

firstStep = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _indMax = sprite_get_number(sprite_index)-1;

if firstStep
{
    if unlockEvent != -1 {event_register_script(unlockEvent, id, SetObjectVar, id, "locked", false);}
    if lockEvent != -1 {event_register_script(lockEvent, id, SetObjectVar, id, "locked", true);}
    
    player_move_distance *= open_dir;
    camera_move_distance *= open_dir;

    if open_dir == LEFT 
    {
        if camera_move_distance == -151 {camera_move_distance = -152;}
        x -= 10; //Move door back to correct pos after image flip
        player_face_direction = "left";
    }
    
    player_end_x = x+player_move_distance;
    camera_end_x = x+camera_move_distance;
    
    image_xscale = open_dir;
    
    if isWall
    {
        with instance_create(x, y, obj_door_wall)
        {
            image_xscale = other.open_dir;
        }
    }
    
    if createTrigger
    {
        triggerActive = true
        cinfo = DoorCutsceneInfo();
        doorTrigger = instance_create(x, y, obj_door_trigger);
        with doorTrigger
        {
            onGroundRequired = true;
            triggerAction = trig.OnlyOnce;
            image_xscale = other.open_dir;
            trig_action(cutscene_create, other.cinfo)
        }
    }
    firstStep = false;
}

//Trigger will exist if we started with 'createTrigger'
//Can't check if instance exists because deactivated instances return false
var triggerExists = createTrigger;

if (locked and triggerActive) and triggerExists
{
    triggerActive = false;
    deactivate_object(doorTrigger);
}
else if (!locked and !triggerActive) and triggerExists
{
    triggerActive = true;
    activate_object(doorTrigger);
}

//OPENING/CLOSING ANIMATION
if open
{
    if image_index = 0 then audio_play_sound(snd_door, 1, 0);
    if image_index != _indMax
    {
        image_index++
    }
}
else
{
    if image_index = _indMax then audio_play_sound(snd_door, 1, 0);
    if image_index != 0
    {
        image_index--
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
