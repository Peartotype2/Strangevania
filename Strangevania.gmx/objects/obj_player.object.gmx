<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>entity_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If gamemanager is not in the level, create it
if !instance_exists(gamemanager) then instance_create(0,0, gamemanager);

outsideRoomTicks    = 0;
maxOutsideRoomTicks = 10*room_speed;

///Creation code
alive           = true;
image_freeze    = false;
disableInput    = false;

facing          = -1;

maxhp           = 16;
if settings.onehit then maxhp = 1;
hp              = maxhp;
dieonce         = true;
deathDelay      = 2*room_speed;
               
skin_index      = director.skin_index;
whip_skin       = director.whipskin_name;
//whip_skin       = "";

canhurt         = true;
invincible      = false;
flash           = 0;

knocked         = false;
knockedsp       = 2;
knockedheight   = -8;
knockeddelay    = 0.3*room_speed;
knockonce       = true;
knockdir        = 1;

upgradeflash    = false;
upflash         = 0;

whipflash       = 0;

move            = 0;

hsp             = 0;
vsp             = 0;

grv             = 1;
maxgrv          = 12;
fallspeed       = 18;//25;

floattime       = 5;
float           = floattime;
jumpsp          = -8;
walksp          = 2;

jumpdir         = 0;
jumped          = false;

falling         = false;
fallonce        = true;
crouch          = false;

attack          = false;
attackonce      = true;

weapon          = false;
weapononce      = true;

onStair         = false;
stairStep       = false;
stairID         = 0;
stairCollision  = -1;
stairDirH       = -1;
stairDirV       = -1;
stepX           = 0;
stepY           = 0;
stepSpeed       = 1;
stairAscend     = -1;
stairStepFirst  = false;
stairCanMove    = false;
stairLatching   = false;
stairTeleYDir   = 1;
stairTeleXDir   = 1;
ascending       = false;

_whipyoff       = 0;
whipbox         = spr_whipbox1;
whip            = 1;
whipsprite      = spr_whip1;
whiptipx        = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if stairLatching and !onStair
{
    var inst = instance_place(x, y, obj_stairparent);
    
    if inst != noone
    {
        x = inst.x;
        y = inst.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerDeath();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>knocked = false;
knockonce = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stairStep = false;
stairStepFirst = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincible = false;
canhurt = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if knocked exit;

if attack
{
    whipbox = spr_whipbox1;
    if whip = 3 { whipbox = spr_whipbox3; }
    
    var _whipsoundData = get_whip_sound_info()
    var _whipsound = _whipsoundData[0];
    var _whipsoundPitchMin = _whipsoundData[1];
    var _whipsoundPitchMax = _whipsoundData[2];
    
    if is_real(_whipsoundPitchMax)
    {play_sound_pitched(_whipsound, _whipsoundPitchMin, _whipsoundPitchMax);}
    else 
    {play_sound_pitched(_whipsound);}
    
    
    
    with instance_create(x, y, obj_whipbox)
    {
        sprite_index = other.whipbox;
        image_xscale = other.image_xscale;
        parent = other;
        if other.crouch
        {
            y += 8;
            yoffset = 8;
        }
    }
}
else if weapon
{
    if gamemanager.weapon == WEP_NONE
    {
        var dir = facing*-1;
        with instance_create(x+(6*dir), y, obj_debris) { hsp = 8*dir; vsp = -5 }
    }
    else
    {
        weapon_parent.weaponUsed = true;
        if weapon_parent.canUse and weapon_parent.canAfford
        {
            event_fire("PlayerUsesWeapon", gamemanager.weapon)
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack = false;
attackonce = true;

weapon = false;
weapononce = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>falling = false;
fallonce = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step Code

if !instance_exists(gamemanager) exit;
if !visible and !instance_exists(obj_cutscene) {visible = true;}

if gamemanager.budha {hp = clamp(hp, 1, maxhp);}

//Inputs
if !disableInput
{
    key_left    = inputmanager.left_held    //keyboard_check(vk_left);
    key_right   = inputmanager.right_held   //keyboard_check(vk_right);
    key_up      = inputmanager.up_held      //keyboard_check(vk_up);
    key_down    = inputmanager.down_held    //keyboard_check(vk_down);
    key_jump    = inputmanager.jump_press   //keyboard_check_pressed(ord("X"));
    key_whip    = inputmanager.attack_press //keyboard_check_pressed(ord("Z"));
    key_weapon  = inputmanager.weapon_press //keyboard_check_pressed(ord("C"));
    if settings.noeasyweapon
    {
        key_weapon  = (inputmanager.up_held and inputmanager.attack_press)
        key_whip    = (inputmanager.attack_press and !inputmanager.up_held)
    }
} else {
    key_left    = false;
    key_right   = false;
    key_up      = false;
    key_down    = false;
    key_jump    = false;
    key_whip    = false;
    key_weapon  = false;
}

if director.disablePlayer
{
    //Pause alarms for disabled objects
    for(i = 0; i &lt;= 11; i++)
    {
        if alarm_get(i) &gt; 0 {alarm[i]++}
    }

    if !global.cutscene_paused image_speed = 0;
    exit;
}
else if image_speed == 0 {image_speed = 1;}

if !InsideRoom(x, y, 32)
{
    outsideRoomTicks++;
}
else
{
    outsideRoomTicks = 0;
}

if outsideRoomTicks &gt;= maxOutsideRoomTicks
{
    hp = 0;
}

if hp &gt; 0
{
    dieonce = true;
    alive = true;
    if hp &gt; maxhp then hp = maxhp;
    
    //Movement
    move = key_right - key_left;
    
    if place_meeting( x, y+1, obj_wall) and !falling and !crouch and !attack and !weapon and !onStair and !knocked
    {
        hsp = move * walksp;
    }
    
    //Knockback
    if knocked
    {
        attack = false;
        
        if vsp == 0 and place_meeting( x, y+1, obj_wall) and knockonce
        {
            alarm[6] = knockeddelay;
            hsp = 0;
            audio_play_sound(snd_fall, 0, 0);
            knockonce = false;
        }
        else if knockonce
        {
            hsp = knockedsp * sign(knockdir);
        }
    }
    
    UpdatePlayerStairMovement()
    
    //Gravity
    if !onStair and !stairLatching
    {
        vsp = vsp + grv;
        if vsp &gt;= maxgrv { vsp = fallspeed; falling = true;}
    }
    
    //Crouching
    if key_down and place_meeting( x, y+1, obj_wall) and !attack and !weapon and !onStair and !stairLatching
    {
        var inst = instance_place(x, y, obj_stairparent);
        if inst != noone
        {
            if !inst.top
            {
                crouch = true;
                hsp = 0;
            }
        }
        else
        {
            crouch = true;
            hsp = 0;
        }
    }
    else
    {
        if !attack and !weapon crouch = false;
    }
    
    //Jumping
    if key_jump
    {
        if place_meeting( x, y+1, obj_wall) and !falling and !crouch and !attack and !weapon and !onStair and !stairLatching and !knocked
        {
            float = floattime;
            vsp = jumpsp;
            jumped = true;
            jumpdir = move;
        }
    }
    if jumped and vsp &gt;= 0 and float
    {
        vsp = 0;
        float--
    }
    
    if !jumped then float = floattime;
    
    //Attacking
    var extraDelay = 3;
    if key_whip and !falling and !knocked and !weapon and !stairLatching
    {
        if (onStair and hsp == 0 and vsp == 0) or (!onStair)
        {
            if attackonce
            {
                attack = true;
                attackonce = false;
                image_index = 0;
                
                if place_meeting( x, y+1, obj_wall) {hsp = 0}
                
                alarm[2] = 6;
                alarm[1] = 9 + extraDelay;
            }
        }/*else if !onStair{
            if attackonce
            {
                attack = true;
                attackonce = false;
                image_index = 0;
                
                if place_meeting( x, y+1, obj_wall) {hsp = 0}
                
                alarm[2] = 6;
                alarm[1] = 9;
            }
        }*/
    }
    if attack
    {
        if place_meeting( x, y+1, obj_wall) {hsp = 0}
        if alarm[1]==(extraDelay) attack = false;
    } 
    
    //USE WEAPON
    var extraDelay = 3;
    if key_weapon and !falling and !knocked and !attack and !stairLatching
    {
        if weapon_parent.canUse and weapon_parent.canAfford
        {
            if (onStair and hsp == 0 and vsp == 0) or (!onStair)
            {
                if weapononce
                {
                    weapon = true;
                    weapononce = false;
                    image_index = 3;
                    
                    if place_meeting( x, y+1, obj_wall) {hsp = 0}
                    
                    alarm[2] = 3;
                    alarm[1] = 9;
                }
            }
        }
        else if !weapon_parent.canAfford and weapononce
        {
            if (onStair and hsp == 0 and vsp == 0) or (!onStair)
            {
                audio_play_sound(snd_error, 1, 0);
                weapon = true;
                weapononce = false;
                image_index = 3;
                
                if place_meeting( x, y+1, obj_wall) {hsp = 0}
                
                alarm[2] = 3;
                alarm[1] = 9;
            }
        }
    }
    if weapon
    {
        if place_meeting( x, y+1, obj_wall) {hsp = 0}
        if alarm[1]==(extraDelay) weapon = false;
    }
    
    //Moving platform logic
    var _movingPlatform = instance_place(x, y + max(1, vsp), obj_platform);
    
    if place_meeting(x, y + max(1, vsp), obj_platform)
    {
        _movingPlatform = instance_nearest(x, bbox_bottom, obj_platform);
    }
    
    if _movingPlatform and bbox_bottom &lt;= _movingPlatform.bbox_top
    {
        _movingPlatform._selected = true;
        var _xadd = _movingPlatform.moveX;
        var _yadd = _movingPlatform.moveY;
        
        if !jumped
        {
            if hsp == 0 then hsp += _xadd;
            //hsp += _xadd;
            vsp += _yadd;
        }
        
        if _xadd == 0 and crouch {hsp = 0;}
    }
    else if crouch
    {
        hsp = 0;
    }
    
    UpdatePlayerHCol();
    
    if jumped and hsp == 0 and jumpdir != 0
    {
        if !place_meeting(x+sign(jumpdir), y, obj_wall)
        {
            hsp = jumpdir * walksp;
        }
    }
    
    //x = x + hsp;
    
    UpdatePlayerVCol();
    //y = y + vsp;
    
    PlayerCornerColCheck()
    
    if vsp == 0
    {
        if falling and fallonce
        {
            //move = 0;
            hsp = 0;
            alarm[0]=room_speed*0.3;
            fallonce = false;
            if !knocked audio_play_sound(snd_fall, 0, 0);
        }
    }
    
    x = x + hsp;
    y = y + vsp;
    
    UpdatePlayerDirection();
    UpdatePlayerSprite();
    
    whiptipx = 0;
    if instance_exists(obj_whipbox)
    {
        if image_xscale = 1
        {
            whiptipx = obj_whipbox.bbox_left;
        }
        else
        {
            whiptipx = obj_whipbox.bbox_right;
        }
    }
}
else
{
    if alive
    {
        music_stop_all();
    }
    alive = false;
    if hp &lt; 0 then hp = 0;
    
    if sprite_index == spr_player_jump {mask_index = spr_player;}
    
    //DEATH CODE ONCE
    if dieonce and ((vsp == 0 and place_meeting( x, y+1, obj_wall)) or !InsideRoom(x, y))
    {
        hsp = 0;
        if vsp == 0 {audio_play_sound(snd_fall, 0, 0);}
        audio_play_sound(snd_playerdeath, 1, 0);
        alarm[7] = deathDelay;
        sprite_index = spr_player_dead;
        image_speed = 1;
        
        onStair = false;
        stairCanMove = false;
        
        dieonce = false;
    }
    
    //DEATH CODE every step
    vsp = vsp + grv;
    if vsp &gt;= 12 { vsp = 25; }
    
    if place_meeting( x, y+vsp, obj_wall)
    {
        while !place_meeting(x, y+sign(vsp), obj_wall)
        {
            y = y + sign(vsp)
        }
        vsp = 0;
    }
    
    y = y + vsp;
    
    if place_meeting( x+hsp, y, obj_wall)
    {
        while !place_meeting(x+sign(hsp), y, obj_wall)
        {
            x = x + sign(hsp)
        }
        hsp = 0;
    }
    
    x = x + hsp;
    
    /*if hsp &gt; 1 {hsp--}
    if hsp &lt; -1 {hsp++}
    if hsp &lt;= 1 and hsp &gt;= -1 {hsp = 0;}*/
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="item_up_whip">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if knocked or !alive then exit;

if whip &lt; 3
{
    whip += 1
    if gamemanager.alarm[0] &lt;= 0
    {
        upgradeflash = true;
        //gamemanager.flash_disablePlayer = director.disablePlayer;
        //gamemanager.flash_disableAI = director.disableAI;
        //gamemanager.flash_disableItems = director.disableItems;
        //director.disablePlayer = true;
        //director.disableAI = true;
        //director.disableItems = true;
        global.whipflash_paused = true;
        gamemanager.alarm[0] = 0.7*room_speed;
    }
    audio_play_sound(snd_upgrade, 0, 0);
    event_fire("PlayerCollectsWhip", whip);
}
else
{
    game_add_points(100);
}

with other
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ai_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canhurt
{
    if other.object_index == ai_cannon
    {
        //Seems like a bad way to do this
        // but this allows the player to jump over the skull cannons
        // without changing the cannons hitbox
        if y &lt; other.y then exit;
    }
    else if other.object_index == ai_red_skeleton
    {
        if other.deadMode then exit;
    }
    hurtPlayer(other, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="part_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canhurt and other.doesDamage
{
    /*invincible = true;
    canhurt = false;
    hp -= other.damage;
    audio_play_sound(snd_hurt, 0, 0);
    alarm[3] = 2*room_speed;
    
    knocked = true;
    hsp = knockedsp * sign(x - other.x);
    vsp = knockedheight;
    sprite_index = spr_player_knockback;
    image_xscale = sign(x - other.x);
    alarm[6] = knockeddelay;*/
    hurtPlayer(other, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index == spr_player_dead
{
    image_speed = 0;
    image_index = sprite_get_number(spr_player_dead)-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if image_freeze then image_speed = 0;

pal_swap_set(pal_player, skin_index, false);
if (attack or weapon) and (onStair or crouch)
{
    if (onStair and ascending) {draw_player_parts(sprite_index, spr_player_whipA);}
    else if (onStair and !ascending) {draw_player_parts(sprite_index, spr_player_whipD);}
    else if (crouch) {draw_player_parts(sprite_index, spr_player_whipC);}
}
else
{
    draw_self();
}
pal_swap_reset();

//Draw correct whip
if attack and !instance_exists(obj_cutscene)
{
    whipsprite = get_whip_sprite(whip);
    if whip == 3 and whip_skin == ""
    {
        if whipflash == 0
        {
            shader_set(sh_invert);
        }
    }
    
    _whipyoff = 0;
    if crouch {_whipyoff = 7;}
    draw_sprite_ext(whipsprite, image_index, x, y+_whipyoff, image_xscale, image_yscale, 0, c_white, 1);
    draw_whip_effect(whip_skin);
    
    if whip == 3
    {
        if whipflash == 0
        {
            shader_reset();
            whipflash = 2;
        }
        else
        {
            whipflash--;
        }
    }
}

if invincible and dieonce
{
    if flash == 0
    {
        var _spr = mask_index;
        if _spr == -1 then _spr = sprite_index;
        shader_set(sh_white)
        image_alpha = 0.75;
        draw_sprite_ext(_spr, image_index, x, y,
         image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        shader_reset();
        flash = 3;
    }
    else
    {
        flash--
    }
}
else {image_alpha = 1;}

if upgradeflash and dieonce
{
    if upflash == 0
    {
        shader_set(sh_invert)
        draw_self();
        shader_reset();
        upflash = 2;
    }
    else
    {
        upflash--
    }
}


//Draw hitbox when enabled
if global.showhitbox
{
    draw_text(x-5, bbox_top-15, hp)
    draw_hitbox();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
