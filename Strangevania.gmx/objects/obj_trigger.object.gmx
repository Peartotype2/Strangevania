<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_trigger</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>allowDead = false;
trigger = false;
once = true;
leavetrigger = true;
execute = false;

waitOnExitDir = false;
exitDirection = 0;
leftExitEvent = -1;
rightExitEvent = -1;

onGroundRequired = false;

trigID = ("triggerEvent" + string(id))

enum trig
{
    OnlyOnce = 0,
    OnEntry = 1,
    OnStep = 2,
    OnExitDirection = 3,
}

triggerAction = trig.OnlyOnce;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = global.showhitbox;
onGround = (!player.jumped);

if place_meeting(x, y, player)
    and (player.alive or (!player.alive and allowDead))
    and ( (onGroundRequired and onGround) or (!onGroundRequired) )
{
    trigger = true;
}
else
{
    trigger = false;
    leavetrigger = true;
}

switch triggerAction
{
    case trig.OnlyOnce:
        if trigger and once
        {
            execute = true; //script_execute(script);
            once = false;
        }
    break;
    
    case trig.OnEntry:
        if trigger and leavetrigger
        {
            execute = true; //script_execute(script);
            leavetrigger = false;
        }
    break;
    
    case trig.OnExitDirection:
        if leftExitEvent == -1 or rightExitEvent == -1
        {print("OnExit TRIGGER SETUP WRONG!!!!"); exit;}    
    
        if trigger
        {
            waitOnExitDir = true;
        }
        
        var left = -1, right = 1;
        if waitOnExitDir
        {
            if player.bbox_left &gt; bbox_right
            {
                exitDirection = right;
                waitOnExitDir = false;
            }
            if player.bbox_right &lt; bbox_left 
            {
                exitDirection = left;
                waitOnExitDir = false;
            }
        }
        
        if exitDirection != 0
        {
            if exitDirection == left {event_fire(leftExitEvent);}
            if exitDirection == right {event_fire(rightExitEvent);}
            exitDirection = 0;
            waitOnExitDir = false;
            trigger = false;
        }
    break;
    
    case trig.OnStep:
        if trigger
        {
            execute = true; //script_execute(script);
        }
    break;
}

if execute
{
    event_fire(trigID);
    execute = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//draw_object_tiled();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
