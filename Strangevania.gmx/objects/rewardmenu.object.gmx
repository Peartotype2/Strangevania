<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>manager_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>firststep   = true;
targetRoom  = intro;
targetLevel = -1;
level       = -1;
timeTotal   = 0;
timeStarted = false;
activeModifiers = (settings.onehit or settings.nowhips or settings.noweapons or settings.permadeath)

musicDelay = 0.75*room_speed;

continueLocked = true;
continueUnlockDelay = 30;

rewardStep = 0;

increment = 20;
increment_delay = 90;
sound_delay = 3;
//divider = 5;

finished = false;
started = false;
continueAlpha = 1;
cont_delay = 25;
//alarm[2] = cont_delay;

stagex = vieww/2;
stagey = 12;
stagescale = 1.5;
//stagecol = c_white;
stage_name = "Stage 0-1"

//alarm[0] = increment_delay;

var _spacer = 9;
scoreamount = 0;
score_num = scoreamount;
score_numstring = string(score_num);
score_zeros = 0;
score_length = 5;
scoretext = "SCORE ";
scorescale = 1;
scorex = vieww/2//-string_width(scoretext+score_numstring);
scorey = viewh/2-_spacer;

scoreModString = "";
scoreModAmount = 0;
scoreModMult   = 0;
scoreModFadeInc = 0.0333;
scoreModAlpha = 0;

if settings.onehit      { scoreModMult += 0.25;  }
if settings.permadeath  { scoreModMult += 0.25;  }
if settings.nowhips     { scoreModMult += 0.25;  }
if settings.noweapons   { scoreModMult += 0.125; }

moneyamount = 0;
money_num = moneyamount;
money_numstring = string(money_num);
moneyscale = 1;
moneyx = vieww/2;
moneyy = viewh/2+_spacer

heartInc = 100;
hearts = 0;
hearts_num = hearts;
hearts_numstring = string(hearts_num);
//heartsx = vieww/2;
//heartsy = viewh/2+_spacer

timeInc = 10;
timeLeft = 0;
time_num = timeLeft;
time_numstring = string(time_num);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>continueLocked = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>music_fade_in(song_victory_short, 250, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>continueAlpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>continueAlpha = 0;
alarm[2] = cont_delay;
alarm[3] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hearts &gt; 0 or timeLeft &gt; 0 //score_num != scoreamount and !started
{
    timeStarted = true;
    audio_play_sound(snd_heart, 0, 0);
    if hearts &gt; 0 {hearts--; scoreamount += 100}
    if timeLeft &gt; 10 {timeLeft -= 10; scoreamount += 100}
    else if timeLeft &gt; 0 {timeLeft--; scoreamount += 10;}
    alarm[1] = sound_delay;
}
else
{
    alarm[0] = 2*room_speed;
}

if money_num != moneyamount and started
{
    audio_play_sound(snd_points, 0, 0);
    alarm[1] = sound_delay;
}
else if started and !finished
{
    audio_play_sound(snd_money, 0, 0);
    finished = true;
    alarm[2] = cont_delay;
    alarm[11] = continueUnlockDelay;
    score_num = scoreamount;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>started = true;
moneyamount = finalmoney;//+= floor(scoreamount/increment);
scoreamount = 0;
alarm[1] = 1;

/*var _mult = 4;
if scoreamount &gt;= increment*_mult
{
    scoreamount -= increment*_mult;
    moneyamount += 1*_mult;
    alarm[0] = increment_delay;
}
else if scoreamount &gt;= 0
{
    scoreamount = 0;
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != level_rewardroom then exit;

if firststep
{
    alarm[10] = musicDelay;
    finalscore = scoreamount;
    finalscore += floor(hearts*heartInc);
    finalscore += floor(timeLeft*timeInc);
    
    var _modscore = round(finalscore*scoreModMult);
    finalscore += _modscore;
    print("MODSCORE: " + string(_modscore));
    
    finalmoney = floor(finalscore / increment)
    
    alarm[1] = increment_delay;
    score_num = scoreamount;
    global.money += (finalmoney);
    print("MONEY ADDED: " + string(finalmoney));
    var _highscore = level_get_score(level);
    var _lowtime = level_get_time(level);
    if finalscore &gt; _highscore {level_set_score(level, finalscore);}
    if timeTotal &lt; _lowtime {level_set_time(level, timeTotal);}
    gamemanager.hearts = gamemanager.heartsDefault;
    
    if level != -1
    {
        stage_name = level[? "displayname"];
    }
    
    firststep = false;
}

//Update score number over time
var sepDivider = 24;
if !started sepDivider = 12;

if score_num != scoreamount
{
    var sep = (scoreamount - score_num);
    var add = floor(sep / sepDivider)
    if abs(sep) &lt;= 2 score_num += sep;
    else if abs(add) &lt;= 2 score_num += sign(sep)*2;
    else score_num += add;
}
var scorestring = string(score_num);
var zerostring = "";
score_zeros = score_length - string_length(scorestring);
for(i = 0; i &lt; score_zeros; i++)
{
    zerostring += "0";
}
score_numstring = zerostring+string(score_num);

if activeModifiers
{
    scoreModAmount = round(score_num * scoreModMult)
    scoreModString = " +" + string(scoreModAmount);
}

//Update money number over time
if money_num != moneyamount
{
    var sep = (moneyamount - money_num);
    var add = floor(sep / 24)
    if sep &lt;= 2 money_num += sep;
    else if add &lt;= 2 money_num += 2;
    else money_num += add;
}
money_numstring = string(money_num);

//Update hearts number over time
if hearts_num != hearts
{
    var sep = (hearts - hearts_num);
    var add = floor(sep / 24)
    if abs(sep) &lt;= 2 hearts_num += sep;
    else if abs(add) &lt;= 2 hearts_num += sign(sep)*2;
    else hearts_num += add;
}
hearts_numstring = string(hearts_num);
if hearts_num &lt; 10 {hearts_numstring = string_insert("0", hearts_numstring, 1);}

//Update time number number over time
if time_num != timeLeft
{
    var sep = (timeLeft - time_num);
    var add = floor(sep / 12)//24)
    if abs(sep) &lt;= 2 time_num += sep;
    else if abs(add) &lt;= 2 time_num += sign(sep)*2;
    else time_num += add;
}
time_numstring = string(time_num);
if time_num &lt; 10 {time_numstring = string_insert("0", time_numstring, 1);}
if time_num &lt; 100 {time_numstring = string_insert("0", time_numstring, 1);}

if inputmanager.any_press
{
    //set vars for next step/stages
    if !finished
    {
        if started
        {
            score_num   = scoreamount;
            money_num   = moneyamount;
            time_num    = timeLeft;
            hearts_num  = hearts;
        }
        else if !started and !timeStarted
        {
            alarm[1] = 1;
        }
        else if timeStarted and scoreamount != finalscore
        {
            scoreamount = finalscore;
            score_num = scoreamount;
            hearts = 0;
            hearts_num = 0;
            timeLeft = 0;
            time_num = 0;
        }
        else if timeStarted and scoreamount == finalscore and !started
        {
            alarm[0] = 1;
            started = true;
        }
    }
    else if finished and !continueLocked
    {
        if targetLevel != -1
        {
            level_continue_to(targetLevel);
        }
        else
        {
            roomFadeTo(targetRoom);
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != level_rewardroom
{instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != level_rewardroom then exit;

//Draw grey over bgr
var _bgrAlpha = 1//0.5;
draw_sprite_ext(spr_white_pixel, 0, -1, -1, room_width, room_height, 0, c_black, _bgrAlpha);

draw_set_font(font_menu);
draw_set_valign(fa_top);
draw_set_halign(fa_center);

//draw_line_colour(0,viewh/2, vieww,viewh/2, c_green, c_green);
//draw_line_colour(vieww/2,0, vieww/2,viewh, c_green, c_green);

//Stage name text
//draw_text_transformed_colour(stagex+1, stagey+1, stage_name, stagescale, stagescale, 0,
// c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
draw_text_transformed_colour(stagex, stagey, stage_name, stagescale, stagescale, 0,
 c_maroon, c_maroon, c_orange, c_orange, 1);
 
draw_text_transformed_colour(stagex, stagey+14, "complete",
 stagescale-0.4, stagescale-0.4, 0, c_white, c_white, c_ltgray, c_ltgray, 1);

draw_set_font(font_hud);
draw_set_valign(fa_top);
//draw_set_halign(fa_left);
draw_set_halign(fa_center);

//Draw Score
var _scoreString = (scoretext + string(score_numstring));
draw_text_transformed(scorex, scorey, _scoreString,
 scorescale, scorescale, 0);

var _modStringScale = sin(current_time/1000 * 2 * pi / 1.25) * 0.125;
draw_set_font(font_menu);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
var _xoff = (string_width(scoreModString)/2)
draw_text_transformed_colour(scorex-3+_xoff+((string_width(_scoreString)/2)*scorescale), scorey, scoreModString,
 scorescale+_modStringScale, scorescale+_modStringScale, 0, c_orange, c_orange, c_yellow, c_yellow, scoreModAlpha);

if finished and scoreModFadeInc &gt; 0 {scoreModFadeInc *= -1}
scoreModAlpha += scoreModFadeInc;
scoreModAlpha = clamp(scoreModAlpha, 0, 1);
 
draw_set_valign(fa_top);
draw_set_halign(fa_left);
 
//Draw Hearts
draw_set_font(font_menu);
//var hearts_xoff = 12;
var hearts_xoff = -((string_width(stage_name)*stagescale)/2)+sprite_get_width(spr_smallheart);
var hearts_yoff = -16;
draw_text_transformed(stagex+hearts_xoff, scorey+hearts_yoff, string(hearts_numstring),
 1, 1, 0);
draw_sprite_ext(spr_smallheart, 0, stagex+hearts_xoff-8, scorey+hearts_yoff+4, 1, 1, 0, c_white, 1)

//Draw Time
draw_set_halign(fa_right);
//var time_xoff = 12+string_width(scoretext + string(score_numstring));
var time_xoff = ((string_width(stage_name)*stagescale)/2);
var time_yoff = -16;
var _strw = string_width(time_numstring);
draw_text_transformed(stagex+time_xoff, scorey+time_yoff, string(time_numstring),
 1, 1, 0);
draw_sprite_ext(spr_timeclock, 0, stagex+time_xoff-_strw-8, scorey+time_yoff+4, 1, 1, 0, c_white, 1)

//Draw Money
draw_set_font(font_hud);
draw_set_halign(fa_left);
draw_set_halign(fa_center);
var moneytext = money_numstring;
var _moneywidth = string_width(moneytext);
var _space = 2;
draw_sprite(spr_money_big, 0, moneyx-(_moneywidth/2)-(_space)-7, moneyy+7);
draw_text_transformed(moneyx, moneyy, moneytext,
 moneyscale, moneyscale, 0);
 
//Draw Modifier icons
var _modCount   = 0;
var _modScale   = 1.5;
var _modX       = 8*_modScale;
var _modY       = 8*_modScale;
var _modInc     = 14*_modScale;

if settings.onehit then {draw_sprite_ext(spr_mod_onehit, 0, _modX, _modY+(_modInc*_modCount),
 _modScale, _modScale, 0, c_white, 1); _modCount++; }

if settings.permadeath then {draw_sprite_ext(spr_mod_permadeath, 0, _modX, _modY+(_modInc*_modCount),
 _modScale, _modScale, 0, c_white, 1); _modCount++; }

if settings.nowhips then {draw_sprite_ext(spr_mod_nowhips, 0, _modX, _modY+(_modInc*_modCount),
 _modScale, _modScale, 0, c_white, 1); _modCount++; }

if settings.noweapons then {draw_sprite_ext(spr_mod_noweapons, 0, _modX, _modY+(_modInc*_modCount),
 _modScale, _modScale, 0, c_white, 1); _modCount++; }

//After finished counting money
if finished
{
    //Continue text
    draw_text_transformed_colour(vieww/2, viewh-24, "Press any key to continue", 0.8, 0.8, 0,
    c_white, c_white, c_ltgray, c_ltgray, continueAlpha);
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
